@page "/counter"


@using ExcelChartsBlazorOpenxml.Services
@using SharedModels.DTO

@inject IFitToConceptService fitToConceptService;

@rendermode InteractiveServer


<MudItem xs="12" sm="7">
    <MudSelect T="string" Variant="Variant.Outlined" FitContent="true"
               ValueChanged="OnProjectChanged">
        @foreach (var proj in projects!)
        {
            <MudSelectItem Value="@(proj)"></MudSelectItem>
        }
    </MudSelect>
</MudItem>

<p>@_options</p>

@code {
    [Parameter]
    public string? value { get; set; }

    [Parameter]
    public string _options { get; set; }

    [Parameter]
    public EventCallback<string> ReturnValue { get; set; } 

    [Parameter]
    public List<string>? projects { get; set; }

    public async Task OnProjectChanged(string selectedProject)
    {
        await ReturnValue.InvokeAsync(selectedProject);
    }
}

@* 

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    bool isDataLoaded = false;

    List<TaskLog> LogList;
    List<TaskLog> UndoneQueueList;


    private async Task LoadLogs()
    {
        LogList = await fitToConceptService.GetLogs();
        UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        LogList = await fitToConceptService.GetLogs();

        UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
       // StartHotReload();
        StateHasChanged();
        isDataLoaded = true;
    }

    private void StartHotReload()
    {
        var timer = new System.Threading.Timer((_) =>
       {
           InvokeAsync(async () =>
           {
               await LoadLogs();
               StateHasChanged();
           });
       }, null, 0, 5000);
    }

    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Done" => "text-info bg-dark",
            "Processing" => "text-warning bg-dark",
            "Fail" => "text-danger bg-dark",
            "Queued" => "text-primary-emphasis bg-dark",
            "Merging" => "text-info-emphasis",
            _ => "text-info-emphasis bg-dark"
        };
    }


} *@