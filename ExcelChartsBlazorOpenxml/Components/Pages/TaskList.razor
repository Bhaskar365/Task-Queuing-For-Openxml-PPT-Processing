@page "/taskList"

@using ExcelChartsBlazorOpenxml.Services
@using ExcelChartsBlazorOpenxml.SharedTaskTracking
@using SharedModels.DTO
@using System.Security.Principal

@inject IFitToConceptService fitToConceptService;

@rendermode InteractiveServer

@inject ITaskTrackingSp _taskLog;

<div>

    <div class="container">
        @if (!isDataLoaded)
        {
            <div class="taskListSpinner">
                <i class="fas fa-spinner fa-spin"></i>
            </div>

        }
        else
        {
            @*            foreach (var lst in finalReportModelDTO)
            {
                <div>@lst.UserName</div>
                <div>@lst.ProjectName</div>
                <div>@lst.TaskID</div>
                <div>@lst.StatusName</div>
                <div>@lst.CreatedOn</div>
                <div>@lst.CompletedOn</div>
            }
 *@
            <MudTable Items="@finalReportModelDTO" Dense="true" Striped="true"
            Class="tableStyling" Breakpoint="Breakpoint.None" Filter="(FilterFunc1)" SortLabel="Sort By">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="taskLogHeader">Task Logs</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1"
                    Placeholder="Search"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium" Immediate="true"
                    Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    @*  <MudTh Class="tableTaskColumnBodyStyling">TaskId</MudTh>
                    <MudTh Class="tableBodyStyling">ProjectType</MudTh> 
                     <MudTh Class="tableBodyStyling">CreatedOn (dd-mm-yyyy)</MudTh>
                    <MudTh Class="tableBodyStyling">CompletedOn (dd-mm-yyyy)</MudTh>
                    <MudTh Class="tableBodyStyling">CreatedBy</MudTh>
                    <MudTh Class="tableBodyStyling">CurrentStatus</MudTh> *@

                    <MudTh Class="tableTaskColumnBodyStyling"><MudTableSortLabel SortBy="new Func<FinalReportModelDTO, object>(x=>x.TaskID)">TaskId</MudTableSortLabel></MudTh>
                    <MudTh Class="tableBodyStyling"><MudTableSortLabel SortBy="new Func<FinalReportModelDTO, object>(x=>x.ProjectName)">ProjectName</MudTableSortLabel></MudTh>
                    <MudTh Class="tableBodyStyling"><MudTableSortLabel SortBy="new Func<FinalReportModelDTO, object>(x=>x.CreatedOn)">CreatedOn (dd-mm-yyyy)</MudTableSortLabel></MudTh>
                    <MudTh Class="tableBodyStyling"><MudTableSortLabel SortBy="new Func<FinalReportModelDTO, object>(x=>x.CompletedOn!)">CompletedOn (dd-mm-yyyy)</MudTableSortLabel></MudTh>
                    <MudTh Class="tableBodyStyling"><MudTableSortLabel SortBy="new Func<FinalReportModelDTO, object>(x=>x.UserName)">UserName</MudTableSortLabel></MudTh>
                    <MudTh Class="tableBodyStyling"><MudTableSortLabel SortBy="new Func<FinalReportModelDTO, object>(x=>x.StatusName)">StatusName</MudTableSortLabel></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd Class="tableTaskColumnBodyStyling">
                        <span class="taskIdText">@context.TaskID</span>
                    </MudTd>
                    <MudTd Class="tableBodyStyling">@context.ProjectName</MudTd>
                    <MudTd Class="tableBodyStyling">@context.CreatedOn.ToString("dd/MM/yyyy H:mm:ss")</MudTd>
                    <MudTd Class="tableBodyStyling">
                        @if (@context.CompletedOn == null)
                        {
                            <p>null</p>
                        }
                        else
                        {
                            @context.CompletedOn
                        }

                    </MudTd>

                    <MudTd style="font-size:smaller;white-space:nowrap;text-align:center">@context.UserName</MudTd>
                    <MudTd class="@GetStatusClass(context.StatusName)" style="font-size:smaller;white-space:nowrap;text-align:center">@context.StatusName</MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudTr>
                        <MudTd ColSpan="7" Class="text-center"
                        style="font-size:small; white-space:nowrap;">
                            No data
                        </MudTd>
                    </MudTr>
                </NoRecordsContent>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100, finalReportModelDTO.Count }"
                    RowsPerPageString="@rowsPerPageString"
                    InfoFormat="@infoFormat"
                    AllItemsText="@allItemsText"
                    HorizontalAlignment="@horizontalAlignment"
                    HideRowsPerPage="@hideRowsPerPage"
                    HidePageNumber="@hidePageNumber"
                    HidePagination="@hidePagination" />
                </PagerContent>
            </MudTable>




            @*     <MudTable Items="@LogList" Dense="true" Striped="true" Class="tableStyling" Breakpoint="Breakpoint.None">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="taskLogHeader">Task Logs</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="tableTaskColumnBodyStyling">TaskId</MudTh>
                    <MudTh Class="tableBodyStyling">ProjectType</MudTh>
                    <MudTh Class="tableBodyStyling">CreatedOn</MudTh>
                    <MudTh Class="tableBodyStyling">CompletedOn</MudTh>
                    <MudTh Class="tableBodyStyling">CreatedBy</MudTh>
                    <MudTh Class="tableBodyStyling">CurrentStatus</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd Class="tableTaskColumnBodyStyling">
                        <span class="taskIdText">@context.TaskId</span>
                    </MudTd>
                    <MudTd Class="tableBodyStyling">@context.ProjectType</MudTd>
                    <MudTd Class="tableBodyStyling">@context.CreatedOn.ToString("dd MMMM yyyy HH:mm:ss")</MudTd>
                    <MudTd Class="tableBodyStyling">@context.CompletedOn</MudTd>

                    <MudTd style="font-size:smaller;white-space:nowrap;text-align:center">@context.CreatedBy</MudTd>
                    <MudTd class="@GetStatusClass(context.CurrentStatus)" style="font-size:smaller;white-space:nowrap;text-align:center">@context.CurrentStatus</MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudTr>
                        <MudTd ColSpan="7" Class="text-center"
                               style="font-size:small; white-space:nowrap;">
                            No data
                        </MudTd>
                    </MudTr>
                </NoRecordsContent>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100, LogList.Count }"
                                   RowsPerPageString="@rowsPerPageString"
                                   InfoFormat="@infoFormat"
                                   AllItemsText="@allItemsText"
                                   HorizontalAlignment="@horizontalAlignment"
                                   HideRowsPerPage="@hideRowsPerPage"
                                   HidePageNumber="@hidePageNumber"
                                   HidePagination="@hidePagination" />
                </PagerContent>
            </MudTable>

            <br />

            <MudTable Items="@UndoneQueueList" Dense="true" Striped="true" Class="tableStyling" Breakpoint="Breakpoint.None">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="failedTaskHeader">Failed Logs</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="tableBodyStyling">TaskId</MudTh>
                    <MudTh Class="tableBodyStyling">ProjectType</MudTh>
                    <MudTh Class="tableBodyStyling">CreatedOn</MudTh>
                    <MudTh Class="tableBodyStyling">CompletedOn</MudTh>
                    <MudTh Class="tableBodyStyling">Generation Time</MudTh>
                    <MudTh Class="tableBodyStyling">CreatedBy</MudTh>
                    <MudTh Class="tableBodyStyling">CurrentStatus</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd Class="tableTaskColumnBodyStyling">
                        <span class="taskIdText">@context.TaskId</span>
                    </MudTd>
                    <MudTd Class="tableBodyStyling">@context.ProjectType</MudTd>
                    <MudTd Class="tableBodyStyling">@context.CreatedOn.ToString("dd MMMM yyyy HH:mm:ss")</MudTd>
                    <MudTd Class="tableBodyStyling">@context.CompletedOn</MudTd>
                    <MudTd Class="tableBodyStyling">
                        @{
                            var duration = @context.CompletedOn - @context.CreatedOn;
                            string formattedDuration = string.Format("{0:%m}m {0:%s}s", duration);
                        }
                        @formattedDuration
                    </MudTd>
                    <MudTd Class="tableBodyStyling">@context.CreatedBy</MudTd>
                    <MudTd class="@GetStatusClass(context.CurrentStatus)" id="tableBodyStyling">@context.CurrentStatus</MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudTr>
                        <MudTd ColSpan="7" Class="text-center"
                               style="font-size:small; white-space:nowrap;">
                            No data
                        </MudTd>
                    </MudTr>
                </NoRecordsContent>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { UndoneQueueList.Count, 5, 10, 25, 50, 100 }"
                                   RowsPerPageString="@rowsPerPageString"
                                   InfoFormat="@infoFormat"
                                   AllItemsText="@allItemsText"
                                   HorizontalAlignment="@horizontalAlignment"
                                   HideRowsPerPage="@hideRowsPerPage"
                                   HidePageNumber="@hidePageNumber"
                                   HidePagination="@hidePagination" />
                </PagerContent>
            </MudTable> *@


        }
    </div>
</div>


@* @if (!isDataLoaded)
{
    <h2>loading.............</h2>
}
else
{
    <div>
        <div class="card card-body">
            <table class="table  table-striped">
                <thead>
                    <tr>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Task ID</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Project Type</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Created On</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Completed On</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Generation Time</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Created By</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (LogList == null || LogList.Count == 0)
                    {
                        <tr>
                            <td colspan="7" class="text-center">No data</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var data in LogList)
                        {
                            <tr>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.TaskId</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.ProjectType</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.CreatedOn.ToString("dddd, dd MMMM yyyy HH:mm:ss")</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.CompletedOn</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">
                                    @{
                                        var duration = data.CompletedOn - data.CreatedOn;
                                        string formattedDuration = string.Format("{0:%m}m {0:%s}s", duration);
                                    }
                                    @formattedDuration
                                </td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.CreatedBy</td>
                                <td class="@GetStatusClass(data.CurrentStatus)" style="font-size:small;white-space:nowrap;text-align:center">
                                    @data.CurrentStatus
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ProjectType</th>
                    <th>Task ID</th>
                    <th>Status</th>
                    <th>Created By</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (UndoneQueueList == null || UndoneQueueList.Count == 0)
                {
                    <tr>
                        <td colspan="5" class="text-center">No data</td>
                    </tr>
                }
                else
                {
                    @foreach (var task in UndoneQueueList)
                    {
                        <tr>
                            <td>@task.ProjectType</td>
                            <td>@task.TaskId</td>
                            <td class="@GetStatusClass(task.CurrentStatus)">
                                @task.CurrentStatus
                            </td>
                            <td>@task.CreatedBy</td>
                            <td class="p-0">
                                <button class="btn btn-info btn-sm"
                                        style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
                                    Retry
                                </button>
                                &nbsp;
                                <button class="btn btn-danger btn-sm"
                                        style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
                                    Remove
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
 *@



@code {

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";


    bool isDataLoaded = false;

    List<TaskLog> LogList;

    List<TaskLog> UndoneQueueList;
    string user = "";
    private string searchString1 = "";

    List<FinalReportModel> finalReportList = new List<FinalReportModel>();

    List<FinalReportModelDTO> finalReportModelDTO = new List<FinalReportModelDTO>();


    private bool FilterFunc1(FinalReportModelDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(FinalReportModelDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.TaskID.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CreatedOn.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CompletedOn.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.StatusName.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ProjectName.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.UserName.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{element.CreatedOn.ToString()} {element.TaskID.ToString()} {element.CompletedOn.ToString()!} {element.StatusName.ToString()!} {element.ProjectName.ToString()} {element.UserName.ToString()}".Contains(searchString))
            return true;

        var combined = $"{element.CreatedOn} {element.TaskID} {element.CompletedOn} {element.StatusName} {element.ProjectName}";
        if (combined.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }



    private async Task LoadLogs()
    {
        int userId = _taskLog.GetUserIdByNameSp(user);

        finalReportList = _taskLog.GetFinalReportsByName(userId);

        finalReportModelDTO.Clear();

        foreach (var data in finalReportList)
        {
            string username = _taskLog.GetUserNameFromIdSp(data.UserID);
            string status = _taskLog.GetStatusNameFromIdSp(data.StatusID);

            finalReportModelDTO.Add(new FinalReportModelDTO
                {
                    TaskID = data.TaskID,
                    StatusName = status,
                    UserName = username,
                    ProjectName = data.ProjectName,
                    CreatedOn = data.CreatedOn,
                    CompletedOn = data.CompletedOn,
                });
        }

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            WindowsIdentity windowsIdentity = WindowsIdentity.GetCurrent();
            user = windowsIdentity.Name.Replace("BI\\", "").ToString();

            await LoadLogs();

            StateHasChanged();



            //StartHotReload();
            // UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
            isDataLoaded = true;
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

    }

    private void StartHotReload()
    {
        var timer = new System.Threading.Timer((_) =>
       {
           InvokeAsync(async () =>
           {
               await LoadLogs();
               StateHasChanged();
           });
       }, null, 0, 5000);

    }

    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Success" => "text-info bg-dark",
            "Processing" => "text-warning bg-dark",
            "Fail" => "text-danger bg-dark",
            "Queued" => "text-primary-emphasis bg-dark",
            "Merging" => "text-info-emphasis",
            _ => "text-info-emphasis bg-dark"
        };
    }



}
