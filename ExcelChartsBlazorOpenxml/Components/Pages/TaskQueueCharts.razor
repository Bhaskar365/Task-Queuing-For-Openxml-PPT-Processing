@page "/taskQueueChart"
@using ClassLibrary1
@using SharedModels
@using SharedModels.DTO

@inject HttpClient http
@rendermode InteractiveServer

@using ExcelChartsBlazorOpenxml.Services
@using WebApplicationAPI.Models
@inject IFitToConceptService fitToConceptService;

@if (!isDataLoaded)
{
    <h2>loading.............</h2>
}
else
{
    <button type="button" class="btn btn-primary buttonload" @onclick="Process">Generate Report</button>

    <div>
        <div class="card card-body">
            <table class="table  table-striped">
                <thead>
                    <tr>
                        <th scope="col">Task ID</th>
                        <th scope="col">Project Type</th>
                        <th scope="col">Created On</th>
                        <th scope="col">Completed On</th>
                        <th scope="col">Generation Time</th>
                        <th scope="col">Created By</th>
                        <th scope="col">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (LogList == null || LogList.Count == 0)
                    {
                        <tr>
                            <td colspan="7" class="text-center">No data</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var data in LogList)
                        {
                            <tr>
                                <td>@data.TaskId</td>
                                <td>@data.ProjectType</td>
                                <td>@data.CreatedOn.ToString("dddd, dd MMMM yyyy HH:mm:ss")</td>
                                <td>@data.CompletedOn</td>
                                <td>
                                    @{
                                        var duration = data.CompletedOn - data.CreatedOn;
                                        string formattedDuration = string.Format("{0:%m}m {0:%s}s", duration);
                                    }
                                    @formattedDuration
                                </td>
                                <td>@data.CreatedBy</td>
                                <td class="@GetStatusClass(data.CurrentStatus)">
                                    @data.CurrentStatus
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        @* unfinished reports *@


        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ProjectType</th>
                    <th>Task ID</th>
                    <th>Status</th>
                    <th>Created By</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (UndoneQueueList == null || UndoneQueueList.Count == 0)
                {
                    <tr>
                        <td colspan="5" class="text-center">No data</td>
                    </tr>
                }
                else
                {
                    @foreach (var task in UndoneQueueList)
                    {
                        <tr>
                            <td>@task.ProjectType</td>
                            <td>@task.TaskId</td>
                            <td class="@GetStatusClass(task.CurrentStatus)">
                                @task.CurrentStatus
                            </td>
                            <td>@task.CreatedBy</td>
                            <td class="p-0">
                                <button class="btn btn-info btn-sm"
                                        style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;"
                                        @onclick="@(()=>RetryAgain(task))">
                                    Retry
                                </button>
                                &nbsp;
                                <button class="btn btn-danger btn-sm"
                                        style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;"
                                        @onclick="@(()=>RemoveTask(task))">
                                    Remove
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>


    </div>



    @if (hasProcessStarted)
    {
        <p class="text-center">
            <i class="fas fa-spinner fa-spin"></i>
        </p>
    }

    @if (reportStatuses == null)
    {
        <h4 class="text-secondary">Processing....</h4>
    }
    else if (reportStatuses.Count == 0)
    {
        @* <h6 class="text-center">No queued items yet</h6> *@
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Project</th>
                    <th>Task ID</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in reportStatuses)
                {
                    <tr>
                        <td>@task.ProjectName</td>
                        <td>@task.TaskId</td>

                        @if (task.Status == "Queued")
                        {
                            <td class="statusTableEl">
                                <div class="text-warning bg-dark statusText">@task.Status</div>
                                <div class="spinner-border  spinner-border-sm text-info" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </td>

                        }
                        else if (task.Status == "Processing")
                        {
                            <td>@task.Status</td>
                        }
                        else if (task.Status == "Done")
                        {
                            <td class="text-info bg-dark">@task.Status</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    bool isDataLoaded = false;

    ProcessState currentState = ProcessState.Idle;

    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Done" => "text-info bg-dark",
            "Processing" => "text-warning bg-dark",
            "Fail" => "text-danger bg-dark",
            "Queued" => "text-primary-emphasis bg-dark",
            _ => "text-info-emphasis bg-dark"
        };
    }

    public bool hasProcessStarted = false;
 
    List<TaskLog> LogList;

    List<TaskLog> UndoneQueueList;

    public class ReportStatus
    {
        public string ProjectName { get; set; } = string.Empty;
        public Guid TaskId { get; set; }
        public string Status { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
     
        StateHasChanged();
        LogList = await fitToConceptService.GetLogs();
        StateHasChanged();


        isDataLoaded = true;
        StateHasChanged();

        StartHotReload();
        UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
    }

    private void RetryAgain(TaskLog report)
    {
        var data = report;



    }

    private void RemoveTask(TaskLog task)
    {
        
    }

    private void StartHotReload()
    {
        var timer = new System.Threading.Timer((_) =>
       {
           InvokeAsync(async () =>
           {
               await LoadLogs();
               StateHasChanged();
           });
       }, null, 0, 5000);
    }

    private async Task LoadLogs()
    {
        LogList = await fitToConceptService.GetLogs();
        UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
        StateHasChanged();
    }

    private List<ReportStatus> reportStatuses = new();

    List<string> projectList = new List<string> {
                                    // "FitToConcept",
                                    // "OverallImpressions",
                                    // "Att1",
                                    // "Att2",
                                    // "AttrAggr",
                                    // "Memorability",
                                    // "PersonalPref",
                                    // "Suffix",
                                    // "VerbalUnder",
                                    // "writtenUnd",
                                    // "Exaggerative",
                                    //"Sala",
                                    // "QTC",
                                    // "Brandex Safety",
                                    //"Brandex Strategic Distinctiveness",
                                    //"Medical Terms",
                                     // "Non-Medical Terms",
                                     "01 Untrue",
                                     "02 Misleading",
                                     "03 Exagg",
                                };

    private async Task Process()
    {
        hasProcessStarted = true;
        currentState = ProcessState.Generating;

        try
        {
            foreach (var project in projectList)
            {
                var request = new ReportGenerationRequest
                    {
                        ProjectTemplateType = project,
                        TaskId = Guid.NewGuid()
                    };

                var taskId = await fitToConceptService.GenerateReportAsync(request);

                reportStatuses.Add(new ReportStatus
                    {
                        ProjectName = request.ProjectTemplateType,
                        TaskId = taskId,
                        Status = "Queued"
                    });

                hasProcessStarted = false;
                _ = PollStatusAsync(taskId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Log or handle exception
            throw new Exception($"Failed to generate reports: {ex.Message}");
        }
    }

    private async Task PollStatusAsync(Guid taskId)
    {
        while (true)
        {
            //var response = await http.GetFromJsonAsync<ReportStatus>($"api/report/status/{taskId}");
            var status = await fitToConceptService.GetReportStatusAsync(taskId);

            var task = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
            if (task != null) task.Status = status;

            if (status == "Done" || status.StartsWith("Error")) break;
            StateHasChanged();
        }

        currentState = ProcessState.Done;

        StateHasChanged();
    }


}
