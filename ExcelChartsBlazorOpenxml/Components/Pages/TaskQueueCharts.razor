@page "/taskQueueChart"
@* @using ClassLibrary1 *@
@using OpenXmlDLLDotnetFramework
@using SharedModels
@using SharedModels.DTO

@inject HttpClient http
@rendermode InteractiveServer

@using ExcelChartsBlazorOpenxml.Services
@using WebApplicationAPI.Models
@inject IFitToConceptService fitToConceptService;

@if (!isDataLoaded)
{
    <h2>loading.............</h2>
}
else
{
    @* <button type="button" class="btn btn-primary buttonload" @onclick="Process">Generate Report</button> *@

    <button type="button" class="btn btn-primary buttonload" @onclick="ProcessDLL">Generate Report</button>

    @* <button type="button" class="btn btn-primary buttonload" @onclick="DLLProcess">Generate Report</button> *@

    <div>
        <div class="card card-body">
            <table class="table  table-striped">
                <thead>
                    <tr>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Task ID</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Project Type</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Created On</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Completed On</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Generation Time</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Created By</th>
                        <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (LogList == null || LogList.Count == 0)
                    {
                        <tr>
                            <td colspan="7" class="text-center">No data</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var data in LogList)
                        {
                            <tr>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.TaskId</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.ProjectType</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.CreatedOn.ToString("dddd, dd MMMM yyyy HH:mm:ss")</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.CompletedOn</td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">
                                    @{
                                        var duration = data.CompletedOn - data.CreatedOn;
                                        string formattedDuration = string.Format("{0:%m}m {0:%s}s", duration);
                                    }
                                    @formattedDuration
                                </td>
                                <td style="font-size:small;white-space:nowrap;text-align:center">@data.CreatedBy</td>
                                <td class="@GetStatusClass(data.CurrentStatus)" style="font-size:small;white-space:nowrap;text-align:center">
                                    @data.CurrentStatus
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        @* unfinished reports *@


        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ProjectType</th>
                    <th>Task ID</th>
                    <th>Status</th>
                    <th>Created By</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (UndoneQueueList == null || UndoneQueueList.Count == 0)
                {
                    <tr>
                        <td colspan="5" class="text-center">No data</td>
                    </tr>
                }
                else
                {
                    @foreach (var task in UndoneQueueList)
                    {
                        <tr>
                            <td>@task.ProjectType</td>
                            <td>@task.TaskId</td>
                            <td class="@GetStatusClass(task.CurrentStatus)">
                                @task.CurrentStatus
                            </td>
                            <td>@task.CreatedBy</td>
                            <td class="p-0">
                                <button class="btn btn-info btn-sm"
                                style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;"
                                @onclick="@(()=>RetryAgain(task))">
                                    Retry
                                </button>
                                &nbsp;
                                <button class="btn btn-danger btn-sm"
                                style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;"
                                @onclick="@(()=>RemoveTask(task))">
                                    Remove
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>


    </div>



    @if (hasProcessStarted)
    {
        <p class="text-center">
            <i class="fas fa-spinner fa-spin"></i>
        </p>
    }

    @if (reportStatuses == null)
    {
        <h4 class="text-secondary">Processing....</h4>
    }
    else if (reportStatuses.Count == 0)
    {
        @* <h6 class="text-center">No queued items yet</h6> *@
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Project</th>
                    <th>Breakdown</th>
                    <th>Task ID</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in reportStatuses)
                {
                    <tr>
                        <td>@task.ProjectName</td>
                        <td>@string.Join(", ", task.Templates ?? new List<string>())</td>
                        <td>@task.TaskId</td>

                        @if (task.Status == "Queued")
                        {
                            <td class="statusTableEl">
                                <div class="text-warning bg-dark statusText">@task.Status</div>
                                <div class="spinner-border  spinner-border-sm text-info" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </td>

                        }
                        else if (task.Status == "Processing")
                        {
                            <td>@task.Status</td>
                        }
                        else if (task.Status == "Done")
                        {
                            <td class="text-info bg-dark">@task.Status</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
}


@code {

    bool isDataLoaded = false;

    public string user = "testUser";

    List<TaskLog> finalLogs = new List<TaskLog>();

    ProcessState currentState = ProcessState.Idle;

    private bool isMerging = false;
    private bool isMergeComplete = false;

    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Done" => "text-info bg-dark",
            "Processing" => "text-warning bg-dark",
            "Fail" => "text-danger bg-dark",
            "Queued" => "text-primary-emphasis bg-dark",
            "Merging" => "text-info-emphasis",
            _ => "text-info-emphasis bg-dark"
        };
    }

    public bool hasProcessStarted = false;

    List<TaskLog> LogList;

    List<TaskLog> UndoneQueueList;

    public class ReportStatus
    {
        public string ProjectName { get; set; } = string.Empty;
        public List<string>? Templates { get; set; }
        public Guid TaskId { get; set; }
        public string Status { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();

        StateHasChanged();
        LogList = await fitToConceptService.GetLogs();
        StateHasChanged();


        isDataLoaded = true;
        StateHasChanged();

        StartHotReload();
        UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
    }

    private void RetryAgain(TaskLog report)
    {
        var data = report;



    }

    private void RemoveTask(TaskLog task)
    {

    }

    private void StartHotReload()
    {
        var timer = new System.Threading.Timer((_) =>
       {
           InvokeAsync(async () =>
           {
               await LoadLogs();
               StateHasChanged();
           });
       }, null, 0, 5000);
    }

    private async Task LoadLogs()
    {
        LogList = await fitToConceptService.GetLogs();
        UndoneQueueList = await fitToConceptService.GetUnfinishedLogs("testUser");
        StateHasChanged();
    }

    private List<ReportStatus> reportStatuses = new();

    List<string> projectList = new List<string> {
                                    "FitToConcept",
                                    "OverallImpressions",
                                    "Att1",
                                    "Att2",
                                    "AttrAggr",
                                    "Memorability",
                                    "PersonalPref",
                                    "Suffix",
                                    "VerbalUnder",
                                    "writtenUnd",
                                    "Exaggerative",
                                    "Sala",
                                    "QTC",
                                    "Brandex Safety",
                                    "Brandex Strategic Distinctiveness",
                                    "Medical Terms",
                                    "Non-Medical Terms",
                                    "02 Misleading",
                                    "03 Exagg",
                                };



    private async Task Process()
    {
        hasProcessStarted = true;
        currentState = ProcessState.Generating;

        isMerging = false;
        isMergeComplete = false;

        var taskIds = new List<Guid>();

        try
        {
            foreach (var project in projectList)
            {
                var request = new ReportGenerationRequest
                    {
                        ProjectTemplateType = project,
                        TaskId = Guid.NewGuid()
                    };

                taskIds.Add(request.TaskId);

                var taskId = await fitToConceptService.GenerateReportAsync(request);

                reportStatuses.Add(new ReportStatus
                    {
                        ProjectName = request.ProjectTemplateType,
                        TaskId = taskId,
                        Status = "Queued"
                    });

                hasProcessStarted = false;
                _ = PollStatusAsync(taskId);
                StateHasChanged();
            }

            await WaitUntilAllTasksComplete(taskIds);

            finalLogs = await fitToConceptService.GetUserLogs(user);

            var result = await fitToConceptService.MergeSlides(finalLogs);

            Guid guid = Guid.NewGuid();

            if (result != null)
            {
                reportStatuses.Add(new ReportStatus
                    {
                        ProjectName = "RACKEM",
                        TaskId = guid,
                        Status = "Merging"
                    });

                var lastListEl = result.Last();

                if (lastListEl != null)
                {
                    var res = lastListEl.CurrentStatus;

                    if (res == "Done")
                    {
                        reportStatuses.First(x => x.TaskId == guid).Status = "Done";
                        StateHasChanged();
                    }
                }
                StateHasChanged();
            }


            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log or handle exception
            throw new Exception($"Failed to generate reports: {ex.Message}");
        }
    }


    private async Task PollStatusAsync(Guid taskId)
    {
        while (true)
        {
            //var response = await http.GetFromJsonAsync<ReportStatus>($"api/report/status/{taskId}");
            var status = await fitToConceptService.GetReportStatusAsync(taskId);

            var task = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
            if (task != null) task.Status = status;

            if (status == "Done" || status.StartsWith("Error")) break;
            StateHasChanged();
        }

        currentState = ProcessState.Done;

        StateHasChanged();
    }


    private async Task WaitUntilAllTasksComplete(List<Guid> taskIds)
    {
        bool allDone = false;

        while (!allDone)
        {
            allDone = true;

            foreach (var taskId in taskIds)
            {
                var status = await fitToConceptService.GetReportStatusAsync(taskId);
                var existing = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
                if (existing != null) existing.Status = status;

                if (!(status == "Done" || status.StartsWith("Processing") || status == "Fail"))
                {
                    allDone = false;
                }
            }

            StateHasChanged(); // Refresh the UI table
            await Task.Delay(10); // Wait a bit before next check
        }
    }



    List<APIRequestModel> projectWrapperAPIList = new List<APIRequestModel>
    {
        new APIRequestModel("RACKEM", "Fit to Concept", "Fit to Concept", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Attribute 1", "Attribute 1", "OVERALL","",""),
        new APIRequestModel("RACKEM", "Attribute 2", "Attribute 2", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Attribute 3", "Attribute 3", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "01 Untrue", "01 Untrue", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "02 Misleading", "02 Misleading", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "03 Exagg", "03 Exagg", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Memorability", "Memorability", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Overall Impressions", "Overall Impressions", "OVERALL", "", ""),
    };

    private async Task ProcessDLL()
    {
        var taskIdList = new List<Guid>();

        try
        {
            foreach (var projectEl in projectWrapperAPIList)
            {
                var request = new ReportGenerationRequestDLL
                    {
                        project = projectEl.project,
                        templates = string.IsNullOrWhiteSpace(projectEl.template) ? new List<string>() : new List<string> { projectEl.template },
                        breakdowns = string.IsNullOrWhiteSpace(projectEl.breakdown) ? new List<string>() : new List<string> { projectEl.breakdown },
                        HistoricalMeanType = projectEl.HistoricalMeanType,
                        HistoricalMeanDescription = projectEl.HistoricalMeanDescription,
                        TaskId = Guid.NewGuid()
                    };

                taskIdList.Add(request.TaskId);

                var taskId = await fitToConceptService.GenerateReportUsingDLLAsync(request);

                reportStatuses.Add(new ReportStatus
                    {
                        ProjectName = request.project,
                        Templates = new List<string> { projectEl.template },
                        TaskId = taskId,
                        Status = "Queued"
                    });

                hasProcessStarted = false;
                _ = PollStatusAsync(taskId);
                StateHasChanged();

                // await fitToConceptService.SendDLLMergeRequest(request);
            }
            // await WaitUntilAllTasksComplete(taskIdList);

            // foreach (var projectEl in projectWrapperAPIList)
            // {
            //     var request = new ReportGenerationRequestDLL
            //         {
            //             project = projectEl.project,
            //             templates = string.IsNullOrWhiteSpace(projectEl.template) ? new List<string>() : new List<string> { projectEl.template },
            //             breakdowns = string.IsNullOrWhiteSpace(projectEl.breakdown) ? new List<string>() : new List<string> { projectEl.breakdown },
            //             HistoricalMeanType = projectEl.HistoricalMeanType,
            //             HistoricalMeanDescription = projectEl.HistoricalMeanDescription,
            //             TaskId = Guid.NewGuid()
            //         };

            //     await fitToConceptService.SendDLLMergeRequest(request);

            //     Console.WriteLine();  
            // }

            // finalLogs = await fitToConceptService.GetUserLogs(user);

            var result = await fitToConceptService.SendDLLMergeRequest(projectWrapperAPIList);

            Console.WriteLine(result);

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    public string finalTemplateName = "MR-Rx Naming";



    private async Task DLLProcess()
    {
        try
        {
            string project = "";
            List<string> lstPages = new List<string>();
            List<string> lstBreakdowns = new List<string>();
            string historType = "";
            string historMeanDesc = "";

            foreach (var list in projectWrapperAPIList)
            {
                lstPages.Add(list.template);
                lstBreakdowns.Add(list.breakdown);
                project = list.project;
                historType = list.HistoricalMeanType;
                historMeanDesc = list.HistoricalMeanDescription;

                await generateUsingOpenXml(project, lstPages, lstBreakdowns, historType, historMeanDesc, finalTemplateName);
            }

        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task generateUsingOpenXml(string project,
                                            List<string> lstPages,
                                            List<string> lstBreakdowns,
                                            string HistoricalMeansType,
                                            string HistoricalMeansDescription,
                                            string FinalTemplate)
    {
        try
        {
            APIWrapper wrapper = new APIWrapper();


            await wrapper.OpenXMLParallelProcess(project, lstPages, lstBreakdowns, HistoricalMeansType, HistoricalMeansDescription, FinalTemplate);

            string op;

            foreach (string brkdown in lstBreakdowns)
            {
                op = await wrapper.addChartsToFinalTemplate1(project, lstPages, FinalTemplate, brkdown);

                if (op == "Process sucessful")
                {


                }
            }
        }
        catch (Exception)
        {
            throw;
        }


    }




}


