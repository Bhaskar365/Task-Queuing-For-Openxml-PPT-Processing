@page "/charts"

@inject ISnackbar Snackbar

@using ExcelChartsBlazorOpenxml.Services
@using SharedModels

@using ClassLibrary1;


@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Drawing.Charts;
@using DocumentFormat.OpenXml.Drawing.Diagrams;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Presentation;
@using System.Diagnostics;
@using System.IO.Packaging;
@using System.Linq;
@using System.Xml.Linq;
@using WebApplicationAPI.Models


@inject IFitToConceptService fitToConceptService;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<br />

@if (!isDataLoaded)
{
    <h2>loading.............</h2>
}
else
{

    <button type="button" class="btn btn-primary buttonload" @onclick="Process" disabled="@hasProcessStarted">
        @if (currentState == ProcessState.Generating)
        {
            <i class="fas fa-spinner fa-spin"></i>

            <span> Generating...</span>
            Snackbar.Add("Generation Started", Severity.Info);
        }
        else if (currentState == ProcessState.Done)
        {
            <i class="fas fa-check"></i>

            <span> Done</span>
            Snackbar.Add("Generation Successful", Severity.Success);
        }
        else
        {
            <span>Generate Report</span>
        }
    </button>

    <br />

    @if (isErrorPresent)
    {
        <p class="text-danger">@emptyMessage</p>
        Snackbar.Add("An error occured", Severity.Error);
    }
    else if (hasProcessStarted && string.IsNullOrEmpty(doneMsg))
    {
        <br />
        <p class="alert alert-primary" role="alert">Processing...................</p>

    }
    else if (!string.IsNullOrEmpty(doneMsg))
    {
        <br />
        <p class="alert alert-success" role="alert">@doneMsg</p>
    }
}


@code {
    ProcessState currentState = ProcessState.Idle;

    public string emptyMessage = "";

    public bool isErrorPresent = false;

    public string doneMsg = "";
    public bool hasProcessStarted = false;

    string sourcePath1;

    bool isDataLoaded = false;

    string project = "";
    public string currentProjectTaskName = "";

    List<FitToConceptModel> fitToConceptsData;
    List<OverallImpressionsModel> OverallImpressionsData;
    List<Aev1> Attribute1Data;
    List<Aev2> Attribute2Data;
    List<Aev3> AttributeAggregrateData;
    List<Memorability> MemorabilityData;
    List<PersonalPreference> PersonalPreferenceData;
    List<Suffix> SuffixData;
    List<VerbalUnderstanding> VerbalUnderstandingData;
    List<WrittenUnderstanding> WrittenUnderstandingData;
    List<Likeability> Exagg;
    List<Sala> Salas;
    List<Sala> Salas154;
    List<QTCModel> Qtc;
    List<BrandexSafetyModel> BrandexSafety;
    List<BrandexStrategicDistinctivenessModel> BrandexStrategicDistinctiveness;
    List<MedicalTermsModel> MedicalTerms;
    List<NonMedicalTermsModel> NonMedicalTerms;
    List<UntrueModel> Untrue01;
    List<MisleadingModel> Misleading02;
    List<Exagg03Model> Exagg03;


    protected override async Task OnInitializedAsync()
    {
        await GetAPIData();
        StateHasChanged();

        isDataLoaded = true;
    }

    private async Task GetAPIData()
    {
        fitToConceptsData = await fitToConceptService.GetFitToConceptData();
        OverallImpressionsData = await fitToConceptService.GetOverallImpressionsData();
        Attribute1Data = await fitToConceptService.GetAtt1Data();
        Attribute2Data = await fitToConceptService.GetAtt2Data();
        AttributeAggregrateData = await fitToConceptService.GetAttrAggData();
        MemorabilityData = await fitToConceptService.MemorabilityData();
        PersonalPreferenceData = await fitToConceptService.PersonalPrefData();
        SuffixData = await fitToConceptService.SuffixData();
        VerbalUnderstandingData = await fitToConceptService.VerbalUnderData();
        WrittenUnderstandingData = await fitToConceptService.WrittenUnderData();
        Exagg = await fitToConceptService.ExaggData();
        Salas = await fitToConceptService.SalaData();
        Salas154 = await fitToConceptService.Sala154Data();
        Qtc = await fitToConceptService.QtcData();
        BrandexSafety = await fitToConceptService.BrandexSafetyData();
        BrandexStrategicDistinctiveness = await fitToConceptService.BrandexStrategicDistinctivenessesData();
        MedicalTerms = await fitToConceptService.MedicalTermsData();
        NonMedicalTerms = await fitToConceptService.NonMedicalTermsData();
        Untrue01 = await fitToConceptService.UntrueData();
        Misleading02 = await fitToConceptService.MisleadingData();
        Exagg03 = await fitToConceptService.Exagg03Data();

        StateHasChanged();
    }

    public string CreateTargetPath(string myTemplate, string project)
    {
        string path = $"C:\\ExcelChartFiles\\{project}";
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        path = $"C:\\Users\\bdas\\Downloads\\{project}_sample.pptx";
        File.Copy(myTemplate, path, true);
        return path;
    }

    DLLCls dllClass = new DLLCls();

    public string destination = "C:\\ExcelChartFiles\\MRRxNaming.pptx";

    string sourceFile1 = "C:\\Users\\bdas\\Downloads\\FittoConcept_sample.pptx";
    string sourceFile2 = "C:\\Users\\bdas\\Downloads\\OverallImpressions_sample.pptx";
    string sourceFile3 = "C:\\Users\\bdas\\Downloads\\PersonalPref_sample.pptx";
    string sourceFile4 = "C:\\Users\\bdas\\Downloads\\VerbalUnder_sample.pptx";
    string sourceFile5 = "C:\\Users\\bdas\\Downloads\\writtenUnd_sample.pptx";
    string sourceFile6 = "C:\\Users\\bdas\\Downloads\\Att1_sample.pptx";
    string sourceFile7 = "C:\\Users\\bdas\\Downloads\\Att2_sample.pptx";
    string sourceFile8 = "C:\\Users\\bdas\\Downloads\\AttrAggr_sample.pptx";
    string sourceFile9 = "C:\\Users\\bdas\\Downloads\\Memorability_sample.pptx";
    string sourceFile10 = "C:\\Users\\bdas\\Downloads\\Exaggerative_sample.pptx";
    string sourceFile11 = "C:\\Users\\bdas\\Downloads\\SALA_sample.pptx";
    string sourceFile12 = "C:\\Users\\bdas\\Downloads\\QTC_sample.pptx";
    string sourceFile13 = "C:\\Users\\bdas\\Downloads\\BrandexSafety_sample.pptx";
    string sourceFile14 = "C:\\Users\\bdas\\Downloads\\BrandexStrategicDistinctiveness_sample.pptx";
    string sourceFile15 = "C:\\Users\\bdas\\Downloads\\MedicalTerms_sample.pptx";
    string sourceFile16 = "C:\\Users\\bdas\\Downloads\\NonMedical_sample.pptx";
    string sourceFile17 = "C:\\Users\\bdas\\Downloads\\02Misleading_sample.pptx";
    string sourceFile18 = "C:\\Users\\bdas\\Downloads\\03Exagg_sample.pptx";

    public async Task Process()
    {
        isErrorPresent = false;
        emptyMessage = "";
        doneMsg = "";
        hasProcessStarted = true;

        currentState = ProcessState.Generating;

        StateHasChanged();

        var FTCdata = fitToConceptsData;

        if (!FTCdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (FTCdata == null || FTCdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (FTCdata.Count != 0 || FTCdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\FittoConcept" + FTCdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.FitToConceptMethod(CreateTargetPath(sourcePath1, FTCdata.First().ProjectTemplateType!), FTCdata);
            });
        }

        var overallData = OverallImpressionsData;

        if (overallData.Count != 0 || overallData.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\OverallImpressions" + overallData.Count + ".pptx";

            await Task.Run(() =>
           {
               dllClass.OverallImpressionsMethod(CreateTargetPath(sourcePath1, overallData.First().ProjectTemplateType!), overallData);
           });
        }

        // Att 1
        var att1data = Attribute1Data;

        if (!att1data.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (att1data == null || att1data.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (att1data.Count != 0 || att1data.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\AttributeEvaluation" + att1data.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.Attribute1Method(CreateTargetPath(sourcePath1, att1data.First().ProjectTemplateType!), att1data);
            });
        }

        // Att 2
        var att2data = Attribute2Data;

        if (!att2data.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (att2data == null || att2data.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (att2data.Count != 0 || att2data.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\AttributeEvaluation" + att2data.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.Attribute2Method(CreateTargetPath(sourcePath1, att2data.First().ProjectTemplateType!), att2data);
            });
        }

        // Attribute Aggregrate
        var attrAggrdata = AttributeAggregrateData;

        if (!attrAggrdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (attrAggrdata == null || attrAggrdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (attrAggrdata.Count != 0 || attrAggrdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\AttributeEvaluationAggregate" + attrAggrdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.AttributeMethodForAttributeEvalAggreg(CreateTargetPath(sourcePath1, attrAggrdata.First().ProjectTemplateType!), attrAggrdata);
            });
        }

        //memorability
        var memorabilitydata = MemorabilityData;

        if (!memorabilitydata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (memorabilitydata == null || memorabilitydata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (memorabilitydata.Count != 0 || memorabilitydata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\Memorability" + memorabilitydata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.MemorabilityMethod(CreateTargetPath(sourcePath1, memorabilitydata.First().ProjectTemplateType!), memorabilitydata);
            });
        }


        //personal preference
        var personalPrefdata = PersonalPreferenceData;

        if (!personalPrefdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (personalPrefdata == null || personalPrefdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (personalPrefdata.Count != 0 || personalPrefdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\PersonalPreferences" + personalPrefdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.PersonalPreferencesMethod(CreateTargetPath(sourcePath1, personalPrefdata.First().ProjectTemplateType!), personalPrefdata);
            });
        }

        //suffix
        var suffixdata = SuffixData;

        if (!suffixdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (suffixdata == null || suffixdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (suffixdata.Count != 0 || suffixdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\Suffix" + suffixdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.SuffixMethod(CreateTargetPath(sourcePath1, suffixdata.First().ProjectTemplateType!), suffixdata);
            });
        }


        //verbal understanding
        var verbalUnderdata = VerbalUnderstandingData;

        if (!verbalUnderdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (verbalUnderdata == null || verbalUnderdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (verbalUnderdata.Count != 0 || verbalUnderdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\VerbalUnderstanding-Bar" + verbalUnderdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.VerbalUnderstandingBarMethod(CreateTargetPath(sourcePath1, verbalUnderdata.First().ProjectTemplateType!), verbalUnderdata);
            });
        }

        //written understanding
        var writtenUnderdata = WrittenUnderstandingData;

        if (!writtenUnderdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (writtenUnderdata == null || writtenUnderdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (writtenUnderdata.Count != 0 || writtenUnderdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\WrittenUnderstanding" + writtenUnderdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.WrittenUnderstandingMethod(CreateTargetPath(sourcePath1, writtenUnderdata.First().ProjectTemplateType!), writtenUnderdata);
            });
        }

        //Exagg
        var exaggdata = Exagg;

        if (!exaggdata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (exaggdata == null || exaggdata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (exaggdata.Count != 0 || exaggdata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\Exaggerative" + exaggdata.Count + ".pptx";

            await Task.Run(() =>
            {
                dllClass.ExaggerativeMethod(CreateTargetPath(sourcePath1, exaggdata.First().ProjectTemplateType!), exaggdata);
            });
        }

        //SALA
        var saladata = Salas;
        if (!saladata.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (saladata == null || saladata.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (saladata.Count != 0 || saladata.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\SALAPlaceholder.pptx";

            await Task.Run(() =>
            {
                dllClass.SALANewMethod(CreateTargetPath(sourcePath1, saladata.First().ProjectTemplateType!), saladata);
            });
        }

        //qtc
        var qtcDataEl = Qtc;
        if (!qtcDataEl.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (qtcDataEl == null || qtcDataEl.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (qtcDataEl.Count != 0 || qtcDataEl.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\QTC.pptx";

            await Task.Run(() =>
            {
                dllClass.QTCMethod(CreateTargetPath(sourcePath1, qtcDataEl.First().ProjectTemplateType!), qtcDataEl);
            });
        }

        //brandex safety
        var brandexData = BrandexSafety;
        if (!brandexData.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (brandexData == null || brandexData.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }

        if (brandexData.Count != 0 || brandexData.Any())
        {
            List<BrandexSafetyShortModel> brandexDataShort = new List<BrandexSafetyShortModel>();

            double average1Max = 0.0000;
            double average2Max = 0.0000;
            double average3Max = 0.0;
            double average4Max = 0.0000;
            double average5Max = 0.0000;

            for (int i = 0; i < brandexData.Count; i++)
            {
                var dblAverage1max = brandexData[i]?.dblAveragePage1;
                if (dblAverage1max == 0.0 || dblAverage1max == null)
                {
                    average1Max = 0;
                }
                if (average1Max < dblAverage1max)
                {
                    average1Max = (double)dblAverage1max;
                }

                var dblAverage2max = brandexData[i].dblAveragePage2;
                if (dblAverage2max == 0.0 || dblAverage2max == null)
                {
                    average2Max = 0;
                }
                if (average2Max < dblAverage2max)
                {
                    average2Max = (double)dblAverage2max;
                }

                var dblAverage3max = brandexData[i].dblAveragePage3;
                if (dblAverage3max == 0.0 || dblAverage3max == null)
                {
                    average3Max = 0;
                }
                if (average3Max < dblAverage3max)
                {
                    average3Max = (double)dblAverage3max;
                }

                var dblAverage4max = brandexData[i].dblAveragePage4;
                if (dblAverage4max == 0.0 || dblAverage4max == null)
                {
                    average4Max = 0;
                }
                if (average4Max < dblAverage4max)
                {
                    average4Max = (double)dblAverage4max;
                }

                var dblAverage5max = brandexData[i].dblAveragePage5;
                if (dblAverage5max == 0.0 || dblAverage5max == null)
                {
                    average5Max = 0;
                }
                if (average5Max < dblAverage5max)
                {
                    average5Max = (double)dblAverage5max;
                }
            }

            double scalingFactor = 0.22;

            for (int i = 0; i < brandexData.Count; i++)
            {
                //for the table
                BrandexSafetyShortModel brandexSafetyShortModel = new BrandexSafetyShortModel();

                var dataEl = brandexData[i];

                double averagePage1WeightedValue = 0.0;
                double averagePage2WeightedValue = 0.0;
                double averagePage3WeightedValue = 0.0;
                double averagePage4WeightedValue = 0.0;
                double averagePage5WeightedValue = 0.0;

                if (average1Max > 0)
                {
                    // averagePage1WeightedValue =(dataEl.dblAveragePage1 / average1Max) * dataEl.dblPage1Weight) ;

                    averagePage1WeightedValue = (double)((double)(dataEl.dblAveragePage1 ?? 0.0 / average1Max) * (double)(dataEl.dblPage1Weight));
                }
                else
                {
                    averagePage1WeightedValue = 0;
                }

                if (average2Max > 0)
                {
                    // averagePage2WeightedValue = (double)(dataEl.dblAveragePage2 / average2Max) * dataEl.dblPage2Weight;

                    averagePage2WeightedValue = (double)((double)(dataEl.dblAveragePage2 ?? 0.0 / average2Max) * (double)(dataEl.dblPage2Weight));
                }
                else
                {
                    averagePage2WeightedValue = 0;
                }

                if (average3Max > 0)
                {
                    averagePage3WeightedValue = (double)((double)(dataEl.dblAveragePage3 ?? 0.0 / average3Max) * (double)(dataEl.dblPage3Weight));
                }
                else
                {
                    averagePage3WeightedValue = 0;
                }

                if (average4Max > 0)
                {
                    //averagePage4WeightedValue = (dataEl.dblAveragePage4 / average4Max) * dataEl.dblPage4Weight;

                    averagePage4WeightedValue = (double)((double)(dataEl.dblAveragePage4 ?? 0.0 / average4Max) * (double)(dataEl.dblPage4Weight));
                }
                else
                {
                    averagePage4WeightedValue = 0;
                }

                if (average5Max > 0)
                {
                    // averagePage5WeightedValue = (dataEl.dblAveragePage5 / average5Max) * dataEl.dblPage5Weight;
                    averagePage5WeightedValue = (double)((double)(dataEl.dblAveragePage5 ?? 0.0 / average5Max) * (double)(dataEl.dblPage5Weight));


                }
                else
                {
                    averagePage5WeightedValue = 0;
                }


                //double averagePage1WeightedValue = (dataEl.dblAveragePage1 / average1Max) * dataEl.dblPage1Weight;
                //double averagePage2WeightedValue = (dataEl.dblAveragePage2 / average2Max) * dataEl.dblPage2Weight;
                //double averagePage3WeightedValue = (dataEl.dblAveragePage3 / average3Max) * dataEl.dblPage3Weight;
                // double averagePage4WeightedValue = (dataEl.dblAveragePage4 / average4Max) * dataEl.dblPage4Weight;
                //double averagePage5WeightedValue = (dataEl.dblAveragePage5 / average5Max) * dataEl.dblPage5Weight;

                double indexSum = (averagePage1WeightedValue + averagePage2WeightedValue + averagePage3WeightedValue +
                                  averagePage4WeightedValue + averagePage5WeightedValue) * scalingFactor;


                brandexSafetyShortModel.strTestName = dataEl.strTestName;

                brandexSafetyShortModel.dblAveragePage1 = dataEl.dblAveragePage1 ?? 0.0;
                brandexSafetyShortModel.dblPage1Weight = dataEl.dblPage1Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage1Weighted = averagePage1WeightedValue;

                brandexSafetyShortModel.dblAveragePage2 = dataEl.dblAveragePage2 ?? 0.0;
                brandexSafetyShortModel.dblPage2Weight = dataEl.dblPage2Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage2Weighted = averagePage2WeightedValue;

                brandexSafetyShortModel.dblAveragePage3 = dataEl.dblAveragePage3 ?? 0.0;
                brandexSafetyShortModel.dblPage3Weight = dataEl.dblPage3Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage3Weighted = averagePage3WeightedValue;

                brandexSafetyShortModel.dblAveragePage4 = dataEl.dblAveragePage4 ?? 0.0;
                brandexSafetyShortModel.dblPage4Weight = dataEl.dblPage4Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage4Weighted = averagePage4WeightedValue;

                brandexSafetyShortModel.dblAveragePage5 = dataEl.dblAveragePage5 ?? 0.0;
                brandexSafetyShortModel.dblPage5Weight = dataEl.dblPage5Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage5Weighted = averagePage5WeightedValue;

                brandexSafetyShortModel.dblAveragePage6 = dataEl.dblAveragePage6 ?? 0.0;
                brandexSafetyShortModel.dblPage6Weight = dataEl.dblPage6Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage6Weighted = (double)dataEl.dblAveragePage6Weighted;

                brandexSafetyShortModel.dblAveragePage7 = dataEl.dblAveragePage7 ?? 0.0;
                brandexSafetyShortModel.dblPage7Weight = dataEl.dblPage7Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage7Weighted = (double)dataEl.dblAveragePage7Weighted;

                brandexSafetyShortModel.dblAveragePage8 = dataEl.dblAveragePage8 ?? 0.0;
                brandexSafetyShortModel.dblPage8Weight = dataEl.dblPage8Weight ?? 0.0;
                brandexSafetyShortModel.dblAveragePage8Weighted = (double)dataEl.dblAveragePage8Weighted;

                brandexSafetyShortModel.dblIndex = indexSum;
                brandexSafetyShortModel.strDSIScore = dataEl.strDSIScore;
                brandexSafetyShortModel.intRed = (int)dataEl.intRed;
                brandexSafetyShortModel.intGreen = (int)dataEl.intGreen;
                brandexSafetyShortModel.intBlue = (int)dataEl.intBlue;
                brandexSafetyShortModel.boolBold = (bool)dataEl.boolBold;


                //for the chart -

                double averagePage1WeightedValueForChart = 0.0;
                double averagePage2WeightedValueForChart = 0.0;
                double averagePage3WeightedValueForChart = 0.0;
                double averagePage4WeightedValueForChart = 0.0;
                double averagePage5WeightedValueForChart = 0.0;

                if (average1Max > 0)
                {
                    averagePage1WeightedValueForChart = (double)((dataEl.dblAveragePage1 ?? 0.0 / average1Max) * dataEl.dblPage1Weight) * scalingFactor;
                }
                else
                {
                    averagePage1WeightedValueForChart = 0;
                }

                if (average2Max > 0)
                {
                    averagePage2WeightedValueForChart = (double)((dataEl.dblAveragePage2 ?? 0.0 / average2Max) * dataEl.dblPage2Weight) * scalingFactor;
                }
                else
                {
                    averagePage2WeightedValueForChart = 0;
                }

                if (average3Max > 0)
                {
                    averagePage3WeightedValueForChart = (double)((dataEl.dblAveragePage3 ?? 0.0 / average3Max) * dataEl.dblPage3Weight) * scalingFactor;
                }
                else
                {
                    averagePage3WeightedValueForChart = 0;
                }

                if (average4Max > 0)
                {
                    averagePage4WeightedValueForChart = (double)((dataEl.dblAveragePage4 ?? 0.0 / average4Max) * dataEl.dblPage4Weight) * scalingFactor;
                }
                else
                {
                    averagePage4WeightedValueForChart = 0;
                }

                if (average5Max > 0)
                {
                    averagePage5WeightedValueForChart = (double)((dataEl.dblAveragePage5 ?? 0.0 / average5Max) * dataEl.dblPage5Weight) * scalingFactor;
                }
                else
                {
                    averagePage5WeightedValueForChart = 0;
                }

                //double averagePage1WeightedValueForChart = ((dataEl.dblAveragePage1 / average1Max) * dataEl.dblPage1Weight) * scalingFactor;
                //double averagePage2WeightedValueForChart = ((dataEl.dblAveragePage2 / average2Max) * dataEl.dblPage2Weight) * scalingFactor;
                //double averagePage3WeightedValueForChart = ((dataEl.dblAveragePage3 / average3Max) * dataEl.dblPage3Weight) * scalingFactor;
                //double averagePage4WeightedValueForChart = ((dataEl.dblAveragePage4 / average4Max) * dataEl.dblPage4Weight) * scalingFactor;
                //double averagePage5WeightedValueForChart = ((dataEl.dblAveragePage5 / average5Max) * dataEl.dblPage5Weight) * scalingFactor;

                double indexSumForChart = averagePage1WeightedValueForChart +
                                          averagePage2WeightedValueForChart +
                                          averagePage3WeightedValueForChart +
                                          averagePage4WeightedValueForChart +
                                          averagePage5WeightedValueForChart;

                brandexSafetyShortModel.strTestName = dataEl.strTestName;

                brandexSafetyShortModel.dblAveragePage1WeightedForChart = averagePage1WeightedValueForChart;

                brandexSafetyShortModel.dblAveragePage2WeightedForChart = averagePage2WeightedValueForChart;

                brandexSafetyShortModel.dblAveragePage3WeightedForChart = averagePage3WeightedValueForChart;

                brandexSafetyShortModel.dblAveragePage4WeightedForChart = averagePage4WeightedValueForChart;

                brandexSafetyShortModel.dblAveragePage5WeightedForChart = averagePage5WeightedValueForChart;

                brandexSafetyShortModel.dblIndexForChart = indexSumForChart;
                brandexSafetyShortModel.strDSIScore = dataEl.strDSIScore;
                brandexSafetyShortModel.intRed = (int)dataEl.intRed;
                brandexSafetyShortModel.intGreen = (int)dataEl.intGreen;
                brandexSafetyShortModel.intBlue = (int)dataEl.intBlue;
                brandexSafetyShortModel.boolBold = (bool)dataEl.boolBold;

                brandexDataShort.Add(brandexSafetyShortModel);
            }

            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\BrandexSafetySpecific{brandexData.Count}.pptx";

            await Task.Run(() =>
            {
                dllClass.BrandexSafetyMethod(CreateTargetPath(sourcePath1, brandexData.First().ProjectTemplateType!), brandexDataShort);
            });
        }


        //brandex strategic distinctiveness
        var brandexStrategicDistinctivenssData = BrandexStrategicDistinctiveness;
        if (!brandexStrategicDistinctivenssData.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (brandexStrategicDistinctivenssData == null || brandexStrategicDistinctivenssData.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (brandexStrategicDistinctivenssData!.Count != 0 || brandexStrategicDistinctivenssData.Any())
        {
            List<BrandexStrategicDistinctivenessShortModel> brandexStrategicDistinctivenessesShortData = new List<BrandexStrategicDistinctivenessShortModel>();

            double dblAverage1Max = 0.0;
            double dblAverage2Max = 0.0;
            double dblAverage3Max = 0.0;
            double dblAverage4Max = 0.0;

            for (int i = 0; i < brandexStrategicDistinctivenssData.Count; i++)
            {
                var dblAverage1MaxValue = brandexStrategicDistinctivenssData[i].dblAveragePage1;
                if (dblAverage1MaxValue == 0)
                {
                    dblAverage1Max = 0.0;
                }
                if (dblAverage1MaxValue > dblAverage1Max)
                {
                    dblAverage1Max = (double)dblAverage1MaxValue;
                }

                var dblAverage2MaxValue = brandexStrategicDistinctivenssData[i].dblAveragePage2;
                if (dblAverage2MaxValue == 0)
                {
                    dblAverage2Max = 0;
                }
                if (dblAverage2MaxValue > dblAverage2Max)
                {
                    dblAverage2Max = (double)dblAverage2MaxValue;
                }

                var dblAverage3MaxValue = brandexStrategicDistinctivenssData[i].dblAveragePage3;
                if (dblAverage3MaxValue == 0)
                {
                    dblAverage3Max = 0;
                }
                if (dblAverage3MaxValue > dblAverage3Max)
                {
                    dblAverage3Max = (double)dblAverage3MaxValue;
                }

                var dblAverage4MaxValue = brandexStrategicDistinctivenssData[i].dblAveragePage4;
                if (dblAverage4MaxValue == 0)
                {
                    dblAverage4Max = 0;
                }
                if (dblAverage4MaxValue > dblAverage4Max)
                {
                    dblAverage4Max = (double)dblAverage4MaxValue;
                }
            }

            // scaling factor
            double scalingFactorForStrategicDistinctiveness = 1.00777;

            for (int i = 0; i < brandexStrategicDistinctivenssData.Count; i++)
            {
                // for the table
                BrandexStrategicDistinctivenessShortModel brandexStrategicDistinctivenessModelData = new BrandexStrategicDistinctivenessShortModel();

                var dataForDistinctivessModel = brandexStrategicDistinctivenssData[i];

                double averagePage1WeightedValue = 0.0;
                double averagePage2WeightedValue = 0.0;
                double averagePage3WeightedValue = 0.0;
                double averagePage4WeightedValue = 0.0;

                if (dblAverage1Max > 0)
                {
                    averagePage1WeightedValue =
                        (double)((dataForDistinctivessModel.dblAveragePage1 / dblAverage1Max) * dataForDistinctivessModel.dblPage1Weight)!;
                }
                else
                {
                    averagePage1WeightedValue = 0;
                }

                if (dblAverage2Max > 0)
                {
                    averagePage2WeightedValue =
                       (double)((dataForDistinctivessModel.dblAveragePage2 / dblAverage2Max) * dataForDistinctivessModel.dblPage2Weight)!;
                }
                else
                {
                    averagePage2WeightedValue = 0;
                }

                if (dblAverage3Max > 0)
                {
                    averagePage3WeightedValue =
                        (double)((dataForDistinctivessModel.dblAveragePage3 / dblAverage3Max) * dataForDistinctivessModel.dblPage3Weight)!;
                }
                else
                {
                    averagePage3WeightedValue = 0;
                }

                if (dblAverage4Max > 0)
                {
                    averagePage4WeightedValue =
                        (double)((dataForDistinctivessModel.dblAveragePage4 / dblAverage4Max) * dataForDistinctivessModel.dblPage4Weight)!;
                }
                else
                {
                    averagePage4WeightedValue = 0;
                }

                double indexSum = (averagePage1WeightedValue + averagePage2WeightedValue + averagePage3WeightedValue +
                             averagePage4WeightedValue) * scalingFactorForStrategicDistinctiveness;

                brandexStrategicDistinctivenessModelData.strTestName = dataForDistinctivessModel.strTestName!;

                brandexStrategicDistinctivenessModelData.dblAveragePage1 = dataForDistinctivessModel.dblAveragePage1;
                brandexStrategicDistinctivenessModelData.dblPage1Weight = dataForDistinctivessModel.dblPage1Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage1Weighted = averagePage1WeightedValue;

                brandexStrategicDistinctivenessModelData.dblAveragePage2 = dataForDistinctivessModel.dblAveragePage2;
                brandexStrategicDistinctivenessModelData.dblPage2Weight = dataForDistinctivessModel.dblPage2Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage2Weighted = averagePage2WeightedValue;

                brandexStrategicDistinctivenessModelData.dblAveragePage3 = dataForDistinctivessModel.dblAveragePage3;
                brandexStrategicDistinctivenessModelData.dblPage3Weight = dataForDistinctivessModel.dblPage3Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage3Weighted = averagePage3WeightedValue;

                brandexStrategicDistinctivenessModelData.dblAveragePage4 = dataForDistinctivessModel.dblAveragePage4;
                brandexStrategicDistinctivenessModelData.dblPage4Weight = dataForDistinctivessModel.dblPage4Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage4Weighted = averagePage4WeightedValue;

                brandexStrategicDistinctivenessModelData.dblAveragePage5 = dataForDistinctivessModel.dblAveragePage5;
                brandexStrategicDistinctivenessModelData.dblPage5Weight = dataForDistinctivessModel.dblPage5Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage5Weighted = dataForDistinctivessModel.dblAveragePage5;

                brandexStrategicDistinctivenessModelData.dblAveragePage6 = dataForDistinctivessModel.dblAveragePage6;
                brandexStrategicDistinctivenessModelData.dblPage6Weight = dataForDistinctivessModel.dblPage6Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage6Weighted = dataForDistinctivessModel.dblAveragePage6Weighted;

                brandexStrategicDistinctivenessModelData.dblAveragePage7 = dataForDistinctivessModel.dblAveragePage7;
                brandexStrategicDistinctivenessModelData.dblPage7Weight = dataForDistinctivessModel.dblPage7Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage7Weighted = dataForDistinctivessModel.dblAveragePage7Weighted;

                brandexStrategicDistinctivenessModelData.dblAveragePage8 = dataForDistinctivessModel.dblAveragePage8;
                brandexStrategicDistinctivenessModelData.dblPage8Weight = dataForDistinctivessModel.dblPage8Weight;
                brandexStrategicDistinctivenessModelData.dblAveragePage8Weighted = dataForDistinctivessModel.dblAveragePage8Weighted;

                brandexStrategicDistinctivenessModelData.dblIndex = indexSum;
                brandexStrategicDistinctivenessModelData.strDSIScore = dataForDistinctivessModel.strDSIScore;
                brandexStrategicDistinctivenessModelData.intRed = dataForDistinctivessModel.intRed;
                brandexStrategicDistinctivenessModelData.intGreen = dataForDistinctivessModel.intGreen;
                brandexStrategicDistinctivenessModelData.intBlue = dataForDistinctivessModel.intBlue;
                brandexStrategicDistinctivenessModelData.boolBold = dataForDistinctivessModel.boolBold;

                // for chart distinctiveness

                int fitToConceptStrategicWeightPage = 40;
                int memorabilityStrategicWeightPage = 15;
                int personalPreferenceStrategicWeightPage = 15;
                int attributeEvaluationStrategicWeightPage = 30;

                double averagePage1WeightedValueForChart = 0.0;
                double averagePage2WeightedValueForChart = 0.0;
                double averagePage3WeightedValueForChart = 0.0;
                double averagePage4WeightedValueForChart = 0.0;

                if (dblAverage1Max > 0)
                {
                    averagePage1WeightedValueForChart = (double)(((dataForDistinctivessModel.dblAveragePage1 / dblAverage1Max) * fitToConceptStrategicWeightPage) * scalingFactorForStrategicDistinctiveness)!;
                }
                else
                {
                    averagePage1WeightedValueForChart = 0;
                }

                if (dblAverage2Max > 0)
                {
                    averagePage2WeightedValueForChart = (double)(((dataForDistinctivessModel.dblAveragePage2 / dblAverage2Max) * memorabilityStrategicWeightPage) * scalingFactorForStrategicDistinctiveness)!;
                }
                else
                {
                    averagePage2WeightedValueForChart = 0;
                }

                if (dblAverage3Max > 0)
                {
                    averagePage3WeightedValueForChart = (double)(((dataForDistinctivessModel.dblAveragePage3 / dblAverage3Max) * personalPreferenceStrategicWeightPage) * scalingFactorForStrategicDistinctiveness)!;
                }
                else
                {
                    averagePage3WeightedValueForChart = 0;
                }

                if (dblAverage4Max > 0)
                {
                    averagePage4WeightedValueForChart = (double)(((dataForDistinctivessModel.dblAveragePage4 / dblAverage4Max) * attributeEvaluationStrategicWeightPage) * scalingFactorForStrategicDistinctiveness)!;
                }
                else
                {
                    averagePage4WeightedValueForChart = 0;
                }

                double indexSumForChartDistinctiveness = averagePage1WeightedValueForChart +
                                          averagePage2WeightedValueForChart +
                                          averagePage3WeightedValueForChart +
                                          averagePage4WeightedValueForChart;

                brandexStrategicDistinctivenessModelData.strTestName = dataForDistinctivessModel.strTestName!;
                brandexStrategicDistinctivenessModelData.dblAveragePage1WeightedForDistinctivenessChart = averagePage1WeightedValueForChart;
                brandexStrategicDistinctivenessModelData.dblAveragePage2WeightedForDistinctivenessChart = averagePage2WeightedValueForChart;
                brandexStrategicDistinctivenessModelData.dblAveragePage3WeightedForDistinctivenessChart = averagePage3WeightedValueForChart;
                brandexStrategicDistinctivenessModelData.dblAveragePage4WeightedForDistinctivenessChart = averagePage4WeightedValueForChart;

                brandexStrategicDistinctivenessModelData.dblIndexForMarketingChart = indexSumForChartDistinctiveness;

                brandexStrategicDistinctivenessModelData.strDSIScore = dataForDistinctivessModel.strDSIScore;
                brandexStrategicDistinctivenessModelData.intRed = dataForDistinctivessModel.intRed;
                brandexStrategicDistinctivenessModelData.intGreen = dataForDistinctivessModel.intGreen;
                brandexStrategicDistinctivenessModelData.intBlue = dataForDistinctivessModel.intBlue;
                brandexStrategicDistinctivenessModelData.boolBold = dataForDistinctivessModel.boolBold;

                // for chart marketing

                int fitToConceptDistinctivenessWeightPage = 10;
                int memorabilityDistinctivenssWeightPage = 30;
                int personalPreferenceDistinctivenessWeightPage = 40;
                int attributeEvaluationDistinctivenessWeightPage = 20;

                double scalingFactorForMarketingChart = 1.00327;

                double averagePage1WeightedValueForMarketingChart = 0.0;
                double averagePage2WeightedValueForMarketingChart = 0.0;
                double averagePage3WeightedValueForMarketingChart = 0.0;
                double averagePage4WeightedValueForMarketingChart = 0.0;

                if (dblAverage1Max > 0)
                {
                    averagePage1WeightedValueForMarketingChart = (double)(((dataForDistinctivessModel.dblAveragePage1 / dblAverage1Max) * fitToConceptDistinctivenessWeightPage) * scalingFactorForMarketingChart)!;
                }
                else
                {
                    averagePage1WeightedValueForMarketingChart = 0;
                }

                if (dblAverage2Max > 0)
                {
                    averagePage2WeightedValueForMarketingChart = (double)(((dataForDistinctivessModel.dblAveragePage2 / dblAverage2Max) * memorabilityDistinctivenssWeightPage) * scalingFactorForMarketingChart)!;
                }
                else
                {
                    averagePage2WeightedValueForMarketingChart = 0;
                }

                if (dblAverage3Max > 0)
                {
                    averagePage3WeightedValueForMarketingChart = (double)(((dataForDistinctivessModel.dblAveragePage3 / dblAverage3Max) * personalPreferenceDistinctivenessWeightPage) * scalingFactorForMarketingChart)!;
                }
                else
                {
                    averagePage3WeightedValueForMarketingChart = 0;
                }

                if (dblAverage4Max > 0)
                {
                    averagePage4WeightedValueForMarketingChart = (double)(((dataForDistinctivessModel.dblAveragePage4 / dblAverage4Max) * attributeEvaluationDistinctivenessWeightPage) * scalingFactorForMarketingChart)!;
                }
                else
                {
                    averagePage4WeightedValueForMarketingChart = 0;
                }

                double indexSumForChartMarketing = averagePage1WeightedValueForMarketingChart +
                                          averagePage2WeightedValueForMarketingChart +
                                          averagePage3WeightedValueForMarketingChart +
                                          averagePage4WeightedValueForMarketingChart;

                brandexStrategicDistinctivenessModelData.strTestName = dataForDistinctivessModel.strTestName!;
                brandexStrategicDistinctivenessModelData.dblAveragePage1WeightedForMarketingChart = averagePage1WeightedValueForMarketingChart;
                brandexStrategicDistinctivenessModelData.dblAveragePage2WeightedForMarketingChart = averagePage2WeightedValueForMarketingChart;
                brandexStrategicDistinctivenessModelData.dblAveragePage3WeightedForMarketingChart = averagePage3WeightedValueForMarketingChart;
                brandexStrategicDistinctivenessModelData.dblAveragePage4WeightedForMarketingChart = averagePage4WeightedValueForMarketingChart;

                brandexStrategicDistinctivenessModelData.dblIndexForDistinctivenessChart = indexSumForChartMarketing;
                brandexStrategicDistinctivenessModelData.strDSIScore = dataForDistinctivessModel.strDSIScore;
                brandexStrategicDistinctivenessModelData.intRed = dataForDistinctivessModel.intRed;
                brandexStrategicDistinctivenessModelData.intGreen = dataForDistinctivessModel.intGreen;
                brandexStrategicDistinctivenessModelData.intBlue = dataForDistinctivessModel.intBlue;
                brandexStrategicDistinctivenessModelData.boolBold = dataForDistinctivessModel.boolBold;

                brandexStrategicDistinctivenessesShortData.Add(brandexStrategicDistinctivenessModelData);
            }

            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\BrandexStrategicDistinctiveness{brandexStrategicDistinctivenssData.Count()}.pptx";

            await Task.Run(() =>
          {
              dllClass.BrandexStrategicDistinctivenessMethod(CreateTargetPath(sourcePath1, brandexStrategicDistinctivenssData.First().ProjectTemplateType!), brandexStrategicDistinctivenessesShortData);

          });
        }

        //medical terms
        var medData = MedicalTerms;
        if (!medData.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (medData == null || medData.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (medData!.Count != 0 || medData.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\MedicalTermsPlaceholderRow.pptx";

            await Task.Run(() =>
            {
                dllClass.MedicalTermsMethod(CreateTargetPath(sourcePath1, medData.First().ProjectTemplateType!), medData);
            });
        }

        //non medical
        var nonMedData = NonMedicalTerms;
        if (!nonMedData.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (nonMedData == null || nonMedData.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (nonMedData!.Count != 0 || nonMedData.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\NonMedicalTermsPlaceholderRow.pptx";

            await Task.Run(() =>
             {
                 dllClass.NonMedicalTermsMethod(CreateTargetPath(sourcePath1, nonMedData.First().ProjectTemplateType!), nonMedData);
             });
        }

        //01 untrue
        var misleading02Data = Misleading02;
        if (!misleading02Data.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (misleading02Data == null || misleading02Data.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (misleading02Data!.Count != 0 || misleading02Data.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\Exaggerative{misleading02Data.Count}.pptx";

            await Task.Run(() =>
           {
               dllClass.Misleading02Method(CreateTargetPath(sourcePath1, misleading02Data.First().ProjectTemplateType!), misleading02Data);
           });
        }

        //03 exagg
        var exaggD = Exagg03;
        if (!exaggD.Any())
        {
            emptyMessage = "No data present in api";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (exaggD == null || exaggD.ToString() == "[]")
        {
            emptyMessage = "Chart Not Available";
            isErrorPresent = true;
            StateHasChanged();
        }
        if (exaggD!.Count != 0 || exaggD.Any())
        {
            sourcePath1 = $"C:\\ExcelChartFiles\\Templates\\Exaggerative{exaggD.Count}.pptx";

            await Task.Run(() =>
           {
               dllClass.Exagg03Method(CreateTargetPath(sourcePath1, exaggD.First().ProjectTemplateType!), exaggD);
           });
        }

        doneMsg = "Done";
        hasProcessStarted = false;
        currentState = ProcessState.Done;
        StateHasChanged();


        int[] sourceInput1 = { 38 };
        int[] sourceInput2 = { 85 };
        int[] sourceInput3 = { 40 };
        int[] sourceInput4 = { 41 };
        int[] sourceInput5 = { 44 };
        int[] sourceInput6 = { 45 };
        int[] sourceInput7 = { 46 };
        int[] sourceInput8 = { 82 };
        int[] sourceInput9 = { 83 };
        int[] sourceInput10 = { 87 };
        int[] sourceInput11 = { 66, 67, 68, 69 };
        int[] sourceInput12 = { 66 };
        int[] sourceInput13 = { 66, 67 };
        int[] sourceInput14 = { 66, 67, 68 };
        int[] sourceInput15 = { 20 };
        int[] sourceInput16 = { 16, 17 };
        int[] sourceInput17 = { 19, 20, 21 };
        int[] sourceInput18 = { 71, 72, 73, 74 };
        int[] sourceInput19 = { 76 };
        int[] sourceInput20 = { 88 };
        int[] sourceInput21 = { 89 };

        //fit to concept
        if (!File.Exists(sourceFile1))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile1, destination, sourceInput1);       // 38

            int x = sourceInput1[0] - 1;
            DeleteSlide(destination, x);
        }


        // overall impressions
        if (!File.Exists(sourceFile2))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile2, destination, sourceInput2);        // 38, 85
            DeleteSlide(destination, sourceInput2[0] - 1);
        }

        //Att 1
        if (!File.Exists(sourceFile6))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile6, destination, sourceInput3);       // 38, 85, 40
            DeleteSlide(destination, sourceInput3[0] - 1);
        }

        //Att 2
        if (!File.Exists(sourceFile7))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile7, destination, sourceInput4);      //  38, 85, 40, 41
            int x = sourceInput4[0] - 1;
            DeleteSlide(destination, x);
        }

        //Att Agg
        if (!File.Exists(sourceFile8))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile8, destination, sourceInput5);   // 38, 85, 40, 41, 44
            int x = sourceInput5[0] - 1;
            DeleteSlide(destination, x);
        }

        // memorability
        if (!File.Exists(sourceFile9))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile9, destination, sourceInput6);       // 38, 85, 40, 41, 44, 45
            int x = sourceInput6[0] - 1;
            DeleteSlide(destination, x);
        }

        // personal pref
        if (!File.Exists(sourceFile3))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile3, destination, sourceInput7);  // 38, 85, 40, 41, 44, 45, 46
            int x = sourceInput7[0] - 1;
            DeleteSlide(destination, x);
        }

        //verbal unders
        if (!File.Exists(sourceFile4))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile4, destination, sourceInput8);        // 38, 85, 40, 41, 44, 45, 46, 82
            int x = sourceInput8[0] - 1;
            DeleteSlide(destination, x);
        }

        // written underst
        if (!File.Exists(sourceFile5))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile5, destination, sourceInput9);            // 38, 85, 40, 41, 44, 45, 46, 82, 83
            int x = sourceInput9[0] - 1;
            DeleteSlide(destination, x);
        }

        //exagg
        if (!File.Exists(sourceFile10))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile10, destination, sourceInput10);          // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87
            int x = sourceInput10[0] - 1;
            DeleteSlide(destination, x);
        }

        // SALA
        if (!File.Exists(sourceFile11))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile11, destination, sourceInput11);
            int count = CountSlides(sourceFile11);

            if (count == 1)
            {
                int endIndex = 66 + count + 4;                      // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87,   66

                DeleteSlide(destination, endIndex);
                // DeleteSlide(destination, endIndex - 1);
                // DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 2)
            {
                int endIndex = 66 + count + 4;

                DeleteSlide(destination, endIndex);              // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87,   66, 67
                DeleteSlide(destination, endIndex - 1);
                // DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 3)                                      // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87,   66, 67, 68
            {
                int endIndex = 66 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 4)                                     // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87,   66, 67, 68, 69
            {
                int endIndex = 66 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 5)                                      // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87,   66, 67, 68, 69, 70
            {
                int endIndex = 66 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                DeleteSlide(destination, endIndex - 3);
                DeleteSlide(destination, endIndex - 4);
            }
        }

        //qtc
        if (!File.Exists(sourceFile12))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile12, destination, sourceInput15);        //  20, 38,  40, 41, 44, 45, 46, 82, 83,85, 87,   66, 67, 68, 69,
            int x = sourceInput15[0] - 1;
            DeleteSlide(destination, x);
        }

        //brandex safety
        if (!File.Exists(sourceFile13))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile13, destination, sourceInput16);    //  20, 38,  40, 41, 44, 45, 46, 82, 83,85, 87, 66, 67, 68, 69, 16, 17

            int x = sourceInput16[0] - 1;

            DeleteSlide(destination, x);
            DeleteSlide(destination, x - 1);
        }

        //brandex strategic distinctiveness
        if (!File.Exists(sourceFile14))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile14, destination, sourceInput17);    // 20, 38, 40, 41, 44, 45, 46, 82, 83,85, 87, 66, 67, 68, 69, 16, 17
            // 19,20,21
            int x = sourceInput17[0] - 1;         //18

            DeleteSlide(destination, x);            // 18  -> del 19
            DeleteSlide(destination, x - 1);      // 17  -> del 18
            DeleteSlide(destination, x - 2);      // 16  -> del 17
        }


        //medical terms
        if (!File.Exists(sourceFile15))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile15, destination, sourceInput18);     // 20, 38, 40, 41, 44, 45, 46, 82, 83,85, 87, 66, 67, 68, 69, 16, 17
            //  19,20,21   

            int count = CountSlides(sourceFile15);

            if (count == 1)
            {
                int endIndex = 71 + count + 4;                      // 71

                DeleteSlide(destination, endIndex);
                // DeleteSlide(destination, endIndex - 1);
                // DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 2)
            {
                int endIndex = 71 + count + 4;                       // 71, 72

                DeleteSlide(destination, endIndex);              
                DeleteSlide(destination, endIndex - 1);
                // DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 3)                                      
            {
                int endIndex = 71 + count + 4;                      // 71, 72, 73

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 4)                                   
            {
                int endIndex = 71 + count + 4;                       // 71, 72, 73, 74

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 5)                                      
            {
                int endIndex = 71 + count + 4;                      // 71, 72, 73, 74, 75

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                DeleteSlide(destination, endIndex - 3);
                DeleteSlide(destination, endIndex - 4);
            }
        }


        //non-medical terms
        if (!File.Exists(sourceFile16))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile16, destination, sourceInput19);

            int count = CountSlides(sourceFile16);

            if (count == 1)
            {
                int endIndex = 76 + count + 4;                      // 76

                DeleteSlide(destination, endIndex);
                // DeleteSlide(destination, endIndex - 1);
                // DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 2)
            {
                int endIndex = 76 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                // DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 3)
            {
                int endIndex = 76 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                // DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 4)
            {
                int endIndex = 76 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                DeleteSlide(destination, endIndex - 3);
                // DeleteSlide(destination, endIndex - 4);
            }

            if (count == 5)
            {
                int endIndex = 76 + count + 4;

                DeleteSlide(destination, endIndex);
                DeleteSlide(destination, endIndex - 1);
                DeleteSlide(destination, endIndex - 2);
                DeleteSlide(destination, endIndex - 3);
                DeleteSlide(destination, endIndex - 4);
            }
        }

        
        //02 Misleading
        if (!File.Exists(sourceFile17))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile17, destination, sourceInput20);          // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87 , 88
            int x = sourceInput20[0];
            DeleteSlide(destination, x-1);
        }


        //03 Exagg
        if (!File.Exists(sourceFile18))
        {
            //skip
        }
        else
        {
            MergeSlideWithSlideArray(sourceFile18, destination, sourceInput21);          // 38, 85, 40, 41, 44, 45, 46, 82, 83, 87 , 88
             int x = sourceInput21[0];
             DeleteSlide(destination, x-1);
        }
    }

    public static int id = 20;

    public static void MergeSlideWithSlideArray(string sourcePresentation, string destPresentation, int[] insertIndex)
    {
        using (PresentationDocument destinationDoc = PresentationDocument.Open(destPresentation, true))
        {
            PresentationPart destinationPresPart = destinationDoc.PresentationPart;

            if (destinationPresPart.Presentation.SlideIdList == null)
                destinationPresPart.Presentation.SlideIdList = new SlideIdList();

            using (PresentationDocument sourceDoc = PresentationDocument.Open(sourcePresentation, true))
            {
                PresentationPart sourcePresPart = sourceDoc.PresentationPart;

                uniqueId = GetMaxSlideMasterId(destinationPresPart.Presentation.SlideMasterIdList);
                uint maxSlideId = GetMaxSlideId(destinationPresPart.Presentation.SlideIdList);

                var sourceSlideIds = sourcePresPart.Presentation.SlideIdList.Elements<SlideId>().ToList();

                if (insertIndex.Length > sourceSlideIds.Count)
                    throw new ArgumentException("Not enough slides in source to match insert positions");

                for (int i = 0; i < insertIndex.Length; i++)
                {
                    id++;
                    SlideId sourceSlideId = sourceSlideIds[i];
                    SlidePart sourceSlidePart = (SlidePart)sourcePresPart.GetPartById(sourceSlideId.RelationshipId);

                    string relId = "rel" + id;

                    //SlidePart destinationSlidePart = destinationPresPart?.AddPart<SlidePart>(sourceSlidePart, relId);

                    SlidePart destinationSlidePart = destinationPresPart.AddPart<SlidePart>(sourceSlidePart, relId);
                    //foreach (ChartPart chartPart in sourceSlidePart.ChartParts)
                    //{
                    //    ChartPart newChartPart = destinationSlidePart.AddPart(chartPart);
                    //}

                    SlideMasterPart destinationMasterPart = destinationSlidePart.SlideLayoutPart.SlideMasterPart;
                    destinationPresPart.AddPart(destinationMasterPart);

                    uniqueId++;

                    var x = destinationPresPart.Presentation.SlideMasterIdList.Elements<SlideMasterId>().ToList();

                    var y = destinationPresPart.SlideMasterParts;

                    var z = destinationPresPart.Presentation.SlideIdList;

                    SlideMasterId newSlideMasterId = new SlideMasterId
                        {
                            RelationshipId = destinationPresPart.GetIdOfPart(destinationMasterPart),
                            Id = uniqueId
                        };


                    if (!destinationPresPart.Presentation.SlideMasterIdList.Elements<SlideMasterId>().Any(x => x.RelationshipId == newSlideMasterId.RelationshipId))
                    {
                        destinationPresPart.Presentation.SlideMasterIdList.Append(newSlideMasterId);
                    }

                    //if (!destinationPresPart.SlideMasterParts.Any(m => m.Uri == sourceSlidePart.SlideLayoutPart?.SlideMasterPart?.Uri))
                    //{
                    //    SlideMasterPart newMasterPart = destinationPresPart.AddPart(sourceSlidePart.SlideLayoutPart.SlideMasterPart);
                    //}

                    maxSlideId++;

                    SlideId newSlideId = new SlideId
                        {
                            RelationshipId = relId,
                            Id = maxSlideId
                        };

                    InsertSlideAtIndexArray(destinationPresPart.Presentation.SlideIdList, newSlideId, insertIndex[i]);
                }
                FixSlideLayoutIds(destinationPresPart);
            }


            destinationPresPart.Presentation.Save();
        }
    }


    static uint uniqueId = 2647484033;

    static void FixSlideLayoutIds(PresentationPart presPart)
    {
        foreach (SlideMasterPart slideMasterPart in presPart.SlideMasterParts)
        {
            foreach (SlideLayoutId slideLayoutId in slideMasterPart.SlideMaster.SlideLayoutIdList)
            {
                uniqueId++;
                slideLayoutId.Id = (uint)uniqueId;
            }

            slideMasterPart.SlideMaster.Save();
        }
    }

    public static uint GetMaxSlideMasterId(SlideMasterIdList slideMasterIdList)
    {
        uint max = 2147483648;

        if (slideMasterIdList != null)
        {
            foreach (SlideMasterId child in slideMasterIdList.Elements<SlideMasterId>())
            {
                uint id = child.Id;

                if (id > max) max = id;
            }
        }
        return max;
    }

    public static uint GetMaxSlideId(SlideIdList slideIdList)
    {
        uint max = 256;
        if (slideIdList != null)
        {
            foreach (SlideId child in slideIdList.Elements<SlideId>())
            {
                uint id = child.Id;

                if (id > max)
                    max = id;
            }
        }
        return max;
    }

    public static void InsertSlideAtIndexArray(SlideIdList slideIdList, SlideId newSlideId, int index)
    {
        var slideIds = slideIdList.Elements<SlideId>().ToList();

        if (index < 0 || index >= slideIds.Count)
        {
            slideIdList.Append(newSlideId); // Add to the end if index is out of range
        }
        else
        {
            var targetSlide = slideIds.ElementAt(index);
            targetSlide.InsertBeforeSelf(newSlideId);
        }

        // // Sort slides based on their IDs to ensure correct order
        // var sortedSlides = slideIdList.Elements<SlideId>()
        //     .OrderBy(slide => slide.Id)
        //     .ToList();

        // slideIdList.RemoveAllChildren<SlideId>();
        // foreach (var slide in sortedSlides)
        // {
        //     slideIdList.Append(slide);
        // }
    }


    static int CountSlides(string presentationFile)
    {
        // Open the presentation as read-only.
        using (PresentationDocument presentationDocument = PresentationDocument.Open(presentationFile, false))
        {
            // Pass the presentation to the next CountSlide method
            // and return the slide count.
            return CountSlides(presentationDocument);
        }
    }


    static int CountSlides(PresentationDocument presentationDocument)
    {
        if (presentationDocument is null)
        {
            throw new ArgumentNullException("presentationDocument");
        }

        int slidesCount = 0;

        // Get the presentation part of document.
        PresentationPart? presentationPart = presentationDocument.PresentationPart;

        // Get the slide count from the SlideParts.
        if (presentationPart is not null)
        {
            slidesCount = presentationPart.SlideParts.Count();
        }

        // Return the slide count to the previous method.
        return slidesCount;
    }

    static void DeleteSlide(string presentationFile, int slideIndex)
    {
        // Open the source document as read/write.
        using (PresentationDocument presentationDocument = PresentationDocument.Open(presentationFile, true))
        {
            // Pass the source document and the index of the slide to be deleted to the next DeleteSlide method.
            DeleteSlide(presentationDocument, slideIndex);
        }
    }

    static void DeleteSlide(PresentationDocument presentationDocument, int slideIndex)
    {
        if (presentationDocument is null)
        {
            throw new ArgumentNullException(nameof(presentationDocument));
        }

        // Use the CountSlides sample to get the number of slides in the presentation.
        int slidesCount = CountSlides(presentationDocument);

        if (slideIndex < 0 || slideIndex >= slidesCount)
        {
            throw new ArgumentOutOfRangeException("slideIndex");
        }

        // Get the presentation part from the presentation document.
        PresentationPart? presentationPart = presentationDocument.PresentationPart;

        // Get the presentation from the presentation part.
        Presentation? presentation = presentationPart?.Presentation;

        // Get the list of slide IDs in the presentation.
        SlideIdList? slideIdList = presentation?.SlideIdList;

        // Get the slide ID of the specified slide
        SlideId? slideId = slideIdList?.ChildElements[slideIndex] as SlideId;

        // Get the relationship ID of the slide.
        string? slideRelId = slideId?.RelationshipId;

        // If there's no relationship ID, there's no slide to delete.
        if (slideRelId is null)
        {
            return;
        }

        // Remove the slide from the slide list.
        slideIdList!.RemoveChild(slideId);

        // Remove references to the slide from all custom shows.
        if (presentation!.CustomShowList is not null)
        {
            // Iterate through the list of custom shows.
            foreach (var customShow in presentation.CustomShowList.Elements<CustomShow>())
            {
                if (customShow.SlideList is not null)
                {
                    // Declare a link list of slide list entries.
                    LinkedList<SlideListEntry> slideListEntries = new LinkedList<SlideListEntry>();
                    foreach (SlideListEntry slideListEntry in customShow.SlideList.Elements())
                    {
                        // Find the slide reference to remove from the custom show.
                        if (slideListEntry.Id is not null && slideListEntry.Id == slideRelId)
                        {
                            slideListEntries.AddLast(slideListEntry);
                        }
                    }

                    // Remove all references to the slide from the custom show.
                    foreach (SlideListEntry slideListEntry in slideListEntries)
                    {
                        customShow.SlideList.RemoveChild(slideListEntry);
                    }
                }
            }
        }

        // Get the slide part for the specified slide.
        SlidePart slidePart = (SlidePart)presentationPart!.GetPartById(slideRelId);

        // Remove the slide part.
        presentationPart.DeletePart(slidePart);
    }



}