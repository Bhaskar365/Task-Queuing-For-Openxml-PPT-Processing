@page "/panel"

@using ExcelChartsBlazorOpenxml.Services
@using MudBlazor
@using Newtonsoft.Json
@using OpenXmlDLLDotnetFramework
@using SharedModels
@using SharedModels.DTO
@using System.Xml.Linq
@using System.Data
@using prjData
@using static ExcelChartsBlazorOpenxml.Components.Pages.TaskQueueCharts
@inject IFitToConceptService fitToConceptService;
@inject HttpClient httpClient

<MudTabs Elevation="3" Rounded="true" Class="my-6" ApplyEffectsToContainer="true" PanelClass="pa-2">
    <MudTabPanel Text="Power Point" Class="mudTabPanelFontSize">

        @if(!isContentLoaded) 
        {
        
        }
        else
        {
            
        }

        <div class="panels-container">

            <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 left-panel">
                <MudGrid>
                    <MudPaper Elevation="3" Class="responsive-container-paper">
                        <MudPaper Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label" Color="Color.Error">Select Data Source</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="SourceText"
                                               Variant="Variant.Outlined"
                                               FitContent=True
                                               Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label" Color="Color.Error">Project Name</MudText>
                                </MudItem>

                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="@project"
                                               Variant="Variant.Outlined"
                                               FitContent=True>
                                        @if (!isContentLoaded)
                                        {
                                            <MudSelectItem Value="@(project)">
                                                <i class="fas fa-spinner fa-spin progressProjectSpinner"></i>
                                            </MudSelectItem>
                                        }
                                        else
                                        {
                                            <MudSelectItem Value="@(project)"></MudSelectItem>
                                        }

                                    </MudSelect>
                                </MudItem>



                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @*  <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">DSI Project Name</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="DSITextValue"
                                               Variant="Variant.Outlined"
                                               FitContent=True>
                                        <MudSelectItem Value="@("Option 1")">1062_HC_MR</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Historical Mean Type</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="HistoricalMeanTextValue"
                                               Label=""
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Historical Mean Description</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="HistoricalMeanDescriptionTextValue"
                                               Label=""
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Associations/Likeability %</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudNumericField @bind-Value="associationsValue" Variant="Variant.Outlined" Min="0" Max="10" Style="height:25px;" />
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Attribute Evaluation Title</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudTextField @bind-Value="AttributeTextValue" Variant="Variant.Filled" Disabled Style="height:25px;"></MudTextField>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Fit To Concept</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="FitToConceptTextValue"
                                               Label=""
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Logo Project Folder</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudTextField @bind-Value="LogoFolderTextValue" Variant="Variant.Outlined" Style="height:25px;"></MudTextField>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">PPT Final Template</MudText>
                                </MudItem>

                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="FinalPPTTemplateText"
                                               Variant="Variant.Outlined"
                                               FitContent=True>
                                        <MudSelectItem Value="@("Option 1")">No Template</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                @* <MudItem xs="12" sm="5" Style="display: flex;flex-direction: row;align-items: center;"> *@
                                <MudItem xs="12" sm="5" Class="inlineMudItemClass historicalMeanMudItem">
                                    <MudCheckBox @bind-Value="Size_CheckBox1"
                                                 Size="Size.Small"
                                                 Color="Color.Primary"
                                                 Class="custom-label-historical-mean-checkbox"></MudCheckBox>
                                    <MudText Class="custom-label-historical-mean">Use specific Hist. Mean</MudText>
                                </MudItem>

                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="SpecificHistMean"
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                        <MudSelectItem Value="@("Option 1")">No Template</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper>

                        @* <MudButton Variant="Variant.Filled" Class="generateBtnClass" @onclick="ProcessDLL">Generate Power Point</MudButton> *@


                        <MudButton Variant="Variant.Filled"
                                   Class="generateBtnClass buttonload"
                                   @onclick="ProcessDLL"
                                   disabled="@hasProcessStarted"
                                   Color="@buttonColor">
                            @if (currentState == ProcessState.Generating)
                            {
                                <span> Generating...</span>

                                <i class="fas fa-spinner fa-spin" style="margin-left:3px;"></i>
                            }
                            else if (currentState == ProcessState.Done)
                            {
                                <span>@message</span>

                                <i class="fas fa-check" style="margin-left:3px;"></i>

                            }
                            else
                            {
                                <span>Generate Report</span>
                            }
                        </MudButton>

                        <MudPaper Class="responsive-container" Elevation="0">
                            @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;">
                                <MudItem Style="display: flex;flex-direction: row;align-items: center;">*@
                            <MudGrid AlignItems="Center" Spacing="2" Class="inlineMudItemClass">
                                <MudItem Class="inlineMudItemClass">
                                    <MudCheckBox @bind-Value="Size_CheckBox2" Size="Size.Small" Color="Color.Primary"></MudCheckBox>
                                    <MudText Class="custom-label">Open folder when done</MudText>
                                </MudItem>
                                @* <MudItem xs="12" sm="5" Style="display: flex;flex-direction: row;align-items: center;"> *@
                                <MudItem xs="12" sm="5" Class="inlineMudItemClass">


                                    <MudCheckBox @bind-Value="Size_CheckBox3" Size="Size.Small" Color="Color.Primary"></MudCheckBox>
                                    <MudText Class="custom-label">Use OpenXml</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>

                    </MudPaper>
                </MudGrid>




            </MudContainer>

            <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 right-panel" Style="height:max-content;">
                <MudGrid Class="py-1 px-2" Elevation="0">
                    <MudPaper Elevation="3" Class="responsive-container-paper-right">

                        <MudGrid class="mudGridSectionProjectParams">

                            <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="boxColunnLabelStyling">Pages</MudText>

                                <div id="boxColumnBorderStying">
                                    @if (!isContentLoaded)
                                    {
                                        <p class="lds-dual-ring"></p>
                                    }
                                    else
                                    {
                                        @foreach (var el in lstPg)
                                        {
                                            <MudCheckBox Value="true"
                                                         Label="@el.strPageGroup"
                                                         Color="Color.Primary"
                                                         Size="Size.Small"
                                                         Class="custom-checkbox">
                                            </MudCheckBox>
                                        }
                                    }
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Size="Size.Small"
                                           FullWidth="true" Class="btnClass">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper>

                            <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="boxColunnLabelStyling">Breakdowns</MudText>


                                <div id="boxColumnBorderStying">
                                    @if (!isContentLoaded)
                                    {
                                        <p class="lds-dual-ring"></p>
                                    }
                                    else
                                    {
                                        @foreach (var breakdown in lstBreakdown)
                                        {
                                            <MudCheckBox Value="true"
                                                         Label="@breakdown.strBreakdownName"
                                                         Color="Color.Primary"
                                                         Size="Size.Small" Class="custom-checkbox">
                                            </MudCheckBox>
                                        }
                                    }
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Size="Size.Small" FullWidth="true"
                                           Class="btnClass">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper>

                            <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="boxColunnLabelStyling">Test Names</MudText>

                                <div id="boxColumnBorderStying">
                                    @if (!isContentLoaded)
                                    {
                                        <p class="lds-dual-ring"></p>
                                    }
                                    else
                                    {
                                        @for (int i = 0; i < testNamesList.Count; i++)
                                        {
                                            <MudCheckBox Value="true"
                                                         Label="@testNamesList[i]"
                                                         Color="Color.Primary"
                                                         Size="Size.Small" Class="custom-checkbox">
                                            </MudCheckBox>
                                        }
                                    }
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Size="Size.Small" FullWidth="true"
                                           Class="btnClass">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper>

                            <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="attributeEvalTextStyling">Attribute Evaluation Aggregate</MudText>

                                <div id="boxColumnBorderStying">
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Size="Size.Small"
                                           FullWidth="true"
                                           Class="btnClass">
                                    Select All/Unselect All
                                </MudButton>

                                <MudText Typo="Typo.subtitle2" Class="fitToBrandPersonalityStyling">Fit to Brand Personality Aggregate</MudText>

                                <div id="boxColumnBorderStying">
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Size="Size.Small"
                                           FullWidth="true"
                                           Class="btnClass">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper>

                        </MudGrid>
                    </MudPaper>
                </MudGrid>
            </MudContainer>
        </div>




    </MudTabPanel>

    <MudTabPanel Text="Brandex" BadgeIcon="@Icons.Material.Filled.Check" BadgeColor="Color.Success" Typo="Typo.h6" Class="mudTabPanelFontSize">
        <MudText>Brandex</MudText>
    </MudTabPanel>

    <MudTabPanel Text="QTC" Typo="Typo.subtitle1" Class="mudTabPanelFontSize">
        <MudText>QTC</MudText>
    </MudTabPanel>

    <MudTabPanel Text="Reports" Typo="Typo.h6" Class="mudTabPanelFontSize">
        <MudText>Reports</MudText>
    </MudTabPanel>

</MudTabs>


<div>
    <p>@StartTime.ToString("dd/MM/yyyy HH:mm:ss")</p>
    <p>@EndTime.ToString("dd/MM/yyyy HH:mm:ss")</p>
</div>


@code {

    ProcessState currentState = ProcessState.Idle;
    public bool hasProcessStarted = false;

    string message = "";

    private Color buttonColor;

    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }

    private List<CheckboxItem> checkboxes = new List<CheckboxItem>
    {
        new CheckboxItem { Id = 1, Label = "TESTNAME 1", IsChecked = true },
        new CheckboxItem { Id = 2, Label = "HAMUBFORITOYU", IsChecked = true },
        new CheckboxItem { Id = 3, Label = "RACKEM", IsChecked = true },
         new CheckboxItem { Id = 1, Label = "YESIBY", IsChecked = true },
        new CheckboxItem { Id = 2, Label = "HAMUBFORITOYU", IsChecked = true },
        new CheckboxItem { Id = 3, Label = "RACKEM", IsChecked = true },
         new CheckboxItem { Id = 1, Label = "YESIBY", IsChecked = true },
        new CheckboxItem { Id = 2, Label = "HAMUBFORITOYU", IsChecked = true },
        new CheckboxItem { Id = 3, Label = "RACKEM", IsChecked = true },
        new CheckboxItem { Id = 1, Label = "YESIBY", IsChecked = true },
        new CheckboxItem { Id = 2, Label = "HAMUBFORITOYU", IsChecked = true },
        new CheckboxItem { Id = 3, Label = "RACKEM", IsChecked = true }
    };

    private string selectedOption = "Excel Charts";

    public string SourceText { get; set; } = "Excel Charts";

    public string DSITextValue { get; set; } = "1062_HC_MR";

    public string HistoricalMeanTextValue { get; set; } = "";

    public string HistoricalMeanDescriptionTextValue { get; set; } = "";

    public double associationsValue { get; set; } = 1.0;

    public string AttributeTextValue { get; set; } = "";

    public string FitToConceptTextValue { get; set; } = "";

    public string LogoFolderTextValue = "Location";

    public string FinalPPTTemplateText = "No Template";

    public string SpecificHistMean = "";

    public bool Size_CheckBox1 = false;

    public bool Size_CheckBox2 = true;

    public bool Size_CheckBox3 = false;

    public bool Label_CheckBox2 { get; set; } = true;

    public class CheckboxItem
    {
        public int Id { get; set; }
        public string? Label { get; set; }
        public bool IsChecked { get; set; }
    }

    public class clschartPageGroup
    {
        public string strPageGroup { get; set; }
        public string strPageGroupType { get; set; }
    }

    public class clschartBreakdownGroup
    {
        public int intBreakdownIndex { get; set; }
        public int intBreakdownID { get; set; }
        public string? strBreakdownName { get; set; }
    }


    private List<ReportStatus> reportStatuses = new();

    List<APIRequestModel> projectWrapperAPIList = new List<APIRequestModel>
    {
        new APIRequestModel("RACKEM", "Fit to Concept", "Fit to Concept", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Attribute 1", "Attribute 1", "OVERALL","",""),
        new APIRequestModel("RACKEM", "Attribute 2", "Attribute 2", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Attribute 3", "Attribute 3", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "01 Untrue", "01 Untrue", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "02 Misleading", "02 Misleading", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "03 Exagg", "03 Exagg", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Memorability", "Memorability", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Overall Impressions", "Overall Impressions", "OVERALL", "", ""),

        new APIRequestModel("RACKEM", "Sound Alike-Look Alike", "Sound Alike-Look Alike", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Non-Medical Terms Similarity", "Non-Medical Terms Similarity", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Medical Terms Similarity", "Medical Terms Similarity", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Brandex Safety", "Brandex Safety", "OVERALL", "", ""),
        new APIRequestModel("RACKEM", "Brandex Strategic Distinctiveness", "Brandex Strategic Distinctiveness", "OVERALL", "", ""),
    };

    List<string> testNamesList = new List<string>();
    List<FitToConceptModel> fitToConceptData = new List<FitToConceptModel>();

    List<clschartPageGroup> lstPg = new List<clschartPageGroup>();

    List<clschartBreakdownGroup> lstBreakdown = new List<clschartBreakdownGroup>();

    bool isDataLoaded = false;
    bool isContentLoaded = false;

    public string? project = "";

    APIWrapper api = new APIWrapper();

    protected override async Task OnInitializedAsync()
    {
        var apiCall = await api.CallAPI("RACKEM", "Fit to Concept", "Fit to Concept", "OVERALL", "", "");

        XDocument xDoc = XDocument.Parse(apiCall);
        var data = xDoc?.Root?.Value;

        fitToConceptData = JsonConvert.DeserializeObject<List<FitToConceptModel>>(data!)!;

        project = fitToConceptData.First().ProjectName;

        foreach (var testname in fitToConceptData!)
        {
            testNamesList.Add(testname.TestName!);
        }
        lstPg = await getProjectPagegroupNames(project!);

        lstBreakdown = await getProjectBreakdowngroupNames(project!);


        isDataLoaded = true;
        isContentLoaded = true;
    }

    private async Task<List<clschartPageGroup>> getProjectPagegroupNames(string projectName)
    {
        try
        {
            System.Data.DataTable dt = clsData.MRData.getDataTable("[xlv1].[getPageGroupsForProject]  " + "'" + projectName + "'");


            List<clschartPageGroup> lstPg = dt.AsEnumerable().Select(row => new clschartPageGroup
                {
                    strPageGroup = row.Field<string>("strPageGroup")!,
                    strPageGroupType = row.Field<string>("strPageGroupType")!
                }).ToList();


            return lstPg;
        }
        catch (Exception)
        {
            throw;
        }
    }



    private async Task<List<clschartBreakdownGroup>> getProjectBreakdowngroupNames(string projectName)
    {
        try
        {
            System.Data.DataTable dt = clsData.MRData.getDataTable("[xlv1].[getBreakDownForProject]  " + "'" + projectName + "'");


            List<clschartBreakdownGroup> lstPg = dt.AsEnumerable().Select(row => new clschartBreakdownGroup
                {
                    intBreakdownID = row.Field<int>("intBreakdownID")!,
                    intBreakdownIndex = row.Field<int>("intBreakdownIndex")!,
                    strBreakdownName = row.Field<string>("strBreakdownName")!,
                }).ToList();


            return lstPg;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task ProcessDLL()
    {
        hasProcessStarted = true;
        currentState = ProcessState.Generating;
        StartTime = DateTime.UtcNow;

        var taskIdList = new List<Guid>();

        try
        {
            foreach (var projectEl in projectWrapperAPIList)
            {
                var request = new ReportGenerationRequestDLL
                    {
                        project = projectEl.project,
                        templates = string.IsNullOrWhiteSpace(projectEl.template) ? new List<string>() : new List<string> { projectEl.template },
                        breakdowns = string.IsNullOrWhiteSpace(projectEl.breakdown) ? new List<string>() : new List<string> { projectEl.breakdown },
                        HistoricalMeanType = projectEl.HistoricalMeanType,
                        HistoricalMeanDescription = projectEl.HistoricalMeanDescription,
                        TaskId = Guid.NewGuid()
                    };

                taskIdList.Add(request.TaskId);


                var taskId = await fitToConceptService.GenerateReportUsingDLLAsync(request);

                _ = PollStatusAsync(taskId);
                StateHasChanged();
            }

            var result = await fitToConceptService.SendDLLMergeRequest(projectWrapperAPIList);

            if (result == "Successful")
            {
                buttonColor = Color.Tertiary;
                message = "Merge Successful";
            }
            if (result == "Bad Request")
            {
                buttonColor = Color.Warning;
                message = "Something went wrong";
            }
            if (result == "Fail")
            {
                buttonColor = Color.Error;
                message = "Merge Insuccessful";
            }

            StateHasChanged();
            Console.WriteLine(result);

            hasProcessStarted = false;
            currentState = ProcessState.Done;
            EndTime = DateTime.UtcNow;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    private async Task PollStatusAsync(Guid taskId)
    {
        while (true)
        {
            //var response = await http.GetFromJsonAsync<ReportStatus>($"api/report/status/{taskId}");
            var status = await fitToConceptService.GetReportStatusAsync(taskId);

            var task = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
            if (task != null) task.Status = status;

            if (status == "Done" || status.StartsWith("Error")) break;
            StateHasChanged();
        }

        StateHasChanged();
    }


    private async Task WaitUntilAllTasksComplete(List<Guid> taskIds)
    {
        bool allDone = false;

        while (!allDone)
        {
            allDone = true;

            foreach (var taskId in taskIds)
            {
                var status = await fitToConceptService.GetReportStatusAsync(taskId);
                var existing = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
                if (existing != null) existing.Status = status;

                if (!(status == "Done" || status.StartsWith("Processing") || status == "Fail"))
                {
                    allDone = false;
                }
            }

            StateHasChanged(); // Refresh the UI table
            await Task.Delay(10); // Wait a bit before next check
        }
    }

}
