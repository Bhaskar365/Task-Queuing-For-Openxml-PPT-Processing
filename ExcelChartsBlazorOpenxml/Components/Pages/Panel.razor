@* @page "/panel" *@

@page "/"

@implements IDisposable;

@using ExcelChartsBlazorOpenxml.Services
@using ExcelChartsBlazorOpenxml.SharedTaskTracking
@using MudBlazor
@using Newtonsoft.Json
@using OpenXmlDLLDotnetFramework
@using SharedModels
@using SharedModels.DTO
@using System.Xml.Linq
@using System.Data

@inject ITaskTrackingSp _taskLog;

@using System.Security.Principal
@using prjData

@inject ReportProcessService ReportService;

@using ExcelChartsBlazorOpenxml.Components.Pages.ComponentModules;

@using static ExcelChartsBlazorOpenxml.Components.Pages.TaskQueueCharts
@inject IFitToConceptService fitToConceptService;
@inject HttpClient httpClient

@rendermode InteractiveServer

@if (!isMainContentLoaded)
{
    <div class="panelSpinner">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
}
else
{

    <MudTabs Elevation="3" Rounded="true" Class="my-6" ApplyEffectsToContainer="true" PanelClass="pa-2">
        <MudTabPanel Text="Power Point" Class="mudTabPanelFontSize">

            <div class="panels-container">

                <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 left-panel">
                    <MudGrid>
                        <MudPaper Elevation="3" Class="responsive-container-paper">

                            <DataSourceComponent Text="@SourceText"></DataSourceComponent>

                            @*  <MudPaper Elevation="0">
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label" Color="Color.Error">Select Data Source</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="SourceText"
                                               Variant="Variant.Outlined"
                                               FitContent=True
                                               Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper> *@

                            <MudPaper Class="responsive-container" Elevation="0">
                                @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                                <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">

                                    @* <Home isContentLoaded="isContentLoaded" project="@project" /> *@

                                    <MudItem xs="12" sm="5">
                                        <MudText Class="custom-label" Color="Color.Error">Project Name</MudText>
                                    </MudItem>

                                    <MudItem xs="12" sm="7">
                                        <MudSelect @bind-Value="@project"
                                                   Variant="Variant.Outlined"
                                                   FitContent=True>
                                            @if (!isContentLoaded)
                                            {
                                                <MudSelectItem Value="@(project)">
                                                    <i class="fas fa-spinner fa-spin progressProjectSpinner"></i>
                                                </MudSelectItem>
                                            }
                                            else
                                            {
                                                <MudSelectItem Value="@(project)"></MudSelectItem>
                                            }

                                        </MudSelect>
                                    </MudItem>



                                </MudGrid>
                            </MudPaper>

                            <MudPaper Class="responsive-container" Elevation="0">
                                <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                    <MudItem xs="12" sm="5">
                                        <MudText Class="custom-label">DSI Project Name</MudText>
                                    </MudItem>
                                    <MudItem xs="12" sm="7">
                                        <MudSelect @bind-Value="DSITextValue"
                                                   Variant="Variant.Outlined"
                                                   FitContent=True>
                                            <MudSelectItem Value="@("Option 1")">1062_HC_MR</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>

                            <HistoricalMeanComponent />

                            @*  <MudPaper Class="responsive-container" Elevation="0">
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Historical Mean Type</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="HistoricalMeanTextValue"
                                               Label=""
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper> *@


                            <HistoricalMeanDescription />

                            @* <MudPaper Class="responsive-container" Elevation="0">
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Historical Mean Description</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="HistoricalMeanDescriptionTextValue"
                                               Label=""
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper> *@



                            <MudPaper Class="responsive-container" Elevation="0">
                                @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                                <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                    <MudItem xs="12" sm="5">
                                        <MudText Class="custom-label">Associations/Likeability %</MudText>
                                    </MudItem>
                                    <MudItem xs="12" sm="7">
                                        <MudNumericField @bind-Value="associationsValue" Variant="Variant.Outlined" Min="0" Max="10" Style="height:25px;" />
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>

                            @* <MudPaper Class="responsive-container" Elevation="0">
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Attribute Evaluation Title</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudTextField @bind-Value="AttributeTextValue" Variant="Variant.Filled" Disabled Style="height:25px;"></MudTextField>
                                </MudItem>

                            </MudGrid>
                        </MudPaper> *@

                            <AttributeEvaluationComponent />

                            @*  <MudPaper Class="responsive-container" Elevation="0">
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Fit To Concept</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    <MudSelect @bind-Value="FitToConceptTextValue"
                                               Label=""
                                               Variant="Variant.Outlined"
                                               FitContent=True Disabled>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                        </MudPaper> *@

                            <FitToConceptComponent />

                            <ProjectFolderComponent isContentLoaded="@isContentLoaded" LogoFolderTextValue="@LogoFolderTextValue" />

                            @*<MudPaper Class="responsive-container" Elevation="0">
                            <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                <MudItem xs="12" sm="5">
                                    <MudText Class="custom-label">Logo Project Folder</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="7">
                                    @if (!isContentLoaded)
                                    {
                                        <i class="fas fa-spinner fa-spin progressProjectSpinner"></i>
                                    }
                                    else
                                    {
                                        <MudTextField @bind-Value="LogoFolderTextValue" Variant="Variant.Outlined" Style="height:25px;"></MudTextField>
                                    }
                                </MudItem>

                            </MudGrid>
                        </MudPaper> *@

                            <MudPaper Class="responsive-container" Elevation="0">
                                @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                                <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                    <MudItem xs="12" sm="5">
                                        <MudText Class="custom-label">PPT Final Template</MudText>
                                    </MudItem>

                                    <MudItem xs="12" sm="7">
                                        <MudSelect @bind-Value="finalPPTOption"
                                                   Variant="Variant.Outlined"
                                                   FitContent=True ShrinkLabel>
                                            @foreach (var state in _states)
                                            {
                                                <MudSelectItem Value="state">@state</MudSelectItem>
                                            }
                                            @* <MudSelectItem Value="@("Option 1")">No Template</MudSelectItem> *@
                                        </MudSelect>
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>

                            <MudPaper Class="responsive-container" Elevation="0">
                                @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;margin-top: 4px;"> *@
                                <MudGrid AlignItems="Center" Spacing="2" Class="mudGridSectionOne">
                                    @* <MudItem xs="12" sm="5" Style="display: flex;flex-direction: row;align-items: center;"> *@
                                    <MudItem xs="12" sm="5" Class="inlineMudItemClass historicalMeanMudItem">
                                        <MudCheckBox @bind-Value="Size_CheckBox1"
                                                     Size="Size.Small"
                                                     Color="Color.Primary"
                                                     Class="custom-label-historical-mean-checkbox"></MudCheckBox>
                                        <MudText Class="custom-label-historical-mean">Use specific Hist. Mean</MudText>
                                    </MudItem>

                                    <MudItem xs="12" sm="7">
                                        <MudSelect @bind-Value="SpecificHistMean"
                                                   Variant="Variant.Outlined"
                                                   FitContent=True Disabled>
                                            <MudSelectItem Value="@SpecificHistMean"></MudSelectItem>
                                        </MudSelect>
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>

                            @* <MudButton Variant="Variant.Filled" Class="generateBtnClass" @onclick="ProcessDLL">Generate Power Point</MudButton> *@

                            <MudButton Variant="Variant.Filled"
                                       Class="generateBtnClass buttonload"
                                       @onclick="ProcessDLL"
                                       disabled="!isContentLoaded"
                                       Color="@buttonColor">
                                @*  @if (currentState == ProcessState.Generating)
                            {
                                <span> Generating...</span>

                                <i class="fas fa-spinner fa-spin" style="margin-left:3px;"></i>
                            }
                            else if (currentState == ProcessState.Done)
                            {
                                <span>@message</span>

                                <i class="fas fa-check" style="margin-left:3px;"></i>

                            }
                            else
                            {
                                <span class="btnText">Generate Report</span>
                            } *@

                                @if (ReportService.CurrentState == ProcessState.Generating)
                                {
                                    <span>Generating...</span>
                                    <i class="fas fa-spinner fa-spin" style="margin-left:3px;"></i>
                                }
                                else if (ReportService.CurrentState == ProcessState.Done)
                                {
                                    <span>@ReportService.Message</span>
                                    <i class="fas fa-check" style="margin-left:3px;"></i>
                                }
                                else
                                {
                                    <span class="btnText">Generate Report</span>
                                }

                            </MudButton>

                            <div style="color:red;">@pagesErrorMessage</div>
                            <div style="color:red;">@breakdownErrorMessage</div>

                            <MudPaper Class="responsive-container" Elevation="0">
                                @* <MudGrid AlignItems="Center" Spacing="2" Style="display: flex;flex-direction: row;align-items: center;">
                                <MudItem Style="display: flex;flex-direction: row;align-items: center;">*@
                                <MudGrid AlignItems="Center" Spacing="2" Class="inlineMudItemClass openxmlCheckboxMudGrid">
                                    <MudItem Class="inlineMudItemClass">
                                        <MudCheckBox @bind-Value="Size_CheckBox2" Size="Size.Small" Color="Color.Primary"></MudCheckBox>
                                        <MudText Class="custom-label">Open folder when done</MudText>
                                    </MudItem>
                                    @* <MudItem xs="12" sm="5" Style="display: flex;flex-direction: row;align-items: center;"> *@
                                    <MudItem xs="12" sm="5" Class="inlineMudItemClass">
                                        <MudCheckBox @bind-Value="Size_CheckBox3" Size="Size.Small" Color="Color.Primary"></MudCheckBox>
                                        <MudText Class="custom-label useOpenxmlElement">Use OpenXml</MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>

                        </MudPaper>
                    </MudGrid>




                </MudContainer>

                <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 right-panel" Style="height:max-content;">
                    <MudGrid Class="py-1 px-2" Elevation="0">
                        <MudPaper Elevation="3" Class="responsive-container-paper-right">

                            <MudGrid class="mudGridSectionProjectParams">

                                @* pages *@

                                <ChartPageListComponent chartPageList="@chartPageList" isContentLoaded="@isContentLoaded" chartPageListChanged="OnChartPageListChanged" />

                                @* <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="boxColunnLabelStyling">Pages</MudText>

                                <div id="boxColumnBorderStying">
                                    @if (!isContentLoaded)
                                    {
                                        <p class="lds-dual-ring"></p>
                                    }
                                    else
                                    {
                                        @foreach (var el in chartPageList)
                                        {
                                            <MudCheckBox @bind-Value="@el.isChecked"
                                                         Label="@el.strPageName"
                                                         Color="Color.Primary"
                                                         Size="Size.Small"
                                                         Class="custom-checkbox">
                                            </MudCheckBox>
                                        }
                                    }
                                </div>

                                <MudButton Variant="Variant.Filled"
                                           Size="Size.Small"
                                           FullWidth="true" Class="btnClass" @onclick="(()=>TogglePagesList(chartPageList))">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper> *@

                                @* breakdowns *@

                                <BreakdownPageListComponent isContentLoaded="isContentLoaded" lstBreakdown="lstBreakdown" chartPageListChanged="OnBreakdownPageListChanged" />

                                @* <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="boxColunnLabelStyling">Breakdowns</MudText>


                                <div id="boxColumnBorderStying">
                                    @if (!isContentLoaded)
                                    {
                                        <p class="lds-dual-ring"></p>
                                    }
                                    else
                                    {
                                        @foreach (var breakdown in lstBreakdown)
                                        {
                                            <MudCheckBox @bind-Value="@breakdown.isChecked"
                                            Label="@breakdown.strBreakdownName"
                                            Color="Color.Primary"
                                            Size="Size.Small" Class="custom-checkbox">
                                            </MudCheckBox>
                                        }
                                    }
                                </div>



                                <MudButton Variant="Variant.Filled"
                                Size="Size.Small" FullWidth="true"
                                Class="btnClass" @onclick="(()=> ToggleBreakdownList(lstBreakdown))">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper> *@

                                @* testnames *@

                                <TestnamePagesListComponent isContentLoaded="@isContentLoaded" lstTestnames="@lstTestnames" testnameListChanged="OnTestnamePageListChanged" />

                                @* <MudPaper Elevation="0" class="paramsMudPaperSection">
                                <MudText Typo="Typo.subtitle2" Class="boxColunnLabelStyling">Test Names</MudText>

                                <div id="boxColumnBorderStying">
                                    @if (!isContentLoaded)
                                    {
                                        <p class="lds-dual-ring"></p>
                                    }
                                    else
                                    {
                                        @foreach (var names in lstTestnames)
                                        {
                                            <MudCheckBox @bind-Value="names.isChecked"
                                            Label="@names.testNames"
                                            Color="Color.Primary"
                                            Size="Size.Small" Class="custom-checkbox">
                                            </MudCheckBox>
                                        }

                                    }
                                </div>

                                <MudButton Variant="Variant.Filled"
                                Size="Size.Small" FullWidth="true"
                                Class="btnClass" @onclick="(()=>ToggleTestnames(lstTestnames))">
                                    Select All/Unselect All
                                </MudButton>
                            </MudPaper> *@

                                <MudPaper Elevation="0" class="paramsMudPaperSection">

                                    @* attribute evaluation aggregrate *@
                                    <MudText Typo="Typo.subtitle2" Class="attributeEvalTextStyling">Attribute Evaluation Aggregate</MudText>

                                    <div id="boxColumnBorderStying">
                                    </div>

                                    <MudButton Variant="Variant.Filled"
                                               Size="Size.Small"
                                               FullWidth="true"
                                               Class="btnClass">
                                        Select All/Unselect All
                                    </MudButton>

                                    @* fit to brand personality *@
                                    <MudText Typo="Typo.subtitle2" Class="fitToBrandPersonalityStyling">Fit to Brand Personality Aggregate</MudText>

                                    <div id="boxColumnBorderStying">
                                    </div>

                                    <MudButton Variant="Variant.Filled"
                                               Size="Size.Small"
                                               FullWidth="true"
                                               Class="btnClass">
                                        Select All/Unselect All
                                    </MudButton>
                                </MudPaper>

                            </MudGrid>
                        </MudPaper>
                    </MudGrid>
                </MudContainer>
            </div>




        </MudTabPanel>

        <MudTabPanel Text="Brandex" BadgeIcon="@Icons.Material.Filled.Check" BadgeColor="Color.Success" Typo="Typo.h6" Class="mudTabPanelFontSize">
            <MudText>Brandex</MudText>
        </MudTabPanel>

        <MudTabPanel Text="QTC" Typo="Typo.subtitle1" Class="mudTabPanelFontSize">
            <MudText>QTC</MudText>
        </MudTabPanel>

        <MudTabPanel Text="Reports" Typo="Typo.h6" Class="mudTabPanelFontSize">
            <MudText>Reports</MudText>
        </MudTabPanel>

    </MudTabs>

    <MudExpansionPanels>
        <MudExpansionPanel Text="Panel One" Expanded="true">


            @if (currentTaskModel.Count == 0 || currentTaskModel == null)
            {
                <div>No data</div>
            }
            else
            {

                @*  <div class="card card-body">
                    <table class="table  table-striped">
                        <thead>
                            <tr>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Task ID</th>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Project Type</th>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Created On</th>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Completed On</th>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Created By</th>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Status</th>
                                <th scope="col" style="font-size:small;white-space:nowrap;text-align:center">Status Message</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (currentTaskModel == null || currentTaskModel.Count == 0)
                            {
                                <tr>
                                    <td colspan="7" class="text-center">No data</td>
                                </tr>
                            }
                            else
                            {
                                foreach (var data in currentTaskModel)
                                {
                                    <tr>
                                        <td style="font-size:small;white-space:nowrap;text-align:center">@data.SubtaskId</td>
                                        <td style="font-size:small;white-space:nowrap;text-align:center">@data.TemplateName</td>
                                        <td style="font-size:small;white-space:nowrap;text-align:center">@data.CreatedOn.ToString("dddd, dd MMMM yyyy HH:mm:ss")</td>
                                        <td style="font-size:small;white-space:nowrap;text-align:center">@data.CompletedOn</td>

                                        <td style="font-size:small;white-space:nowrap;text-align:center">@data.UserID</td>
                                        <td style="font-size:small;white-space:nowrap;text-align:center">@data.StatusID</td>

                                        <td style="font-size:small;white-space:nowrap;text-align:center; background:black; color:white;">
                                            @if (data?.StatusMessage == "In Process")
                                            {
                                                <MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Small" />
                                                <span style="margin-left:5px;">@data.StatusMessage</span>
                                            }
                                            else if (data?.StatusMessage == "Completed")
                                            {
                                                <span style="color:limegreen;">@data.StatusMessage</span>
                                            }
                                            else if (data?.StatusMessage == "Failed")
                                            {
                                                <span style="color:red;">@data.StatusMessage</span>
                                            }
                                            else if (data?.StatusMessage == "Queued")
                                            {
                                                <span style="color:orange;">@data?.StatusMessage</span>
                                            }
                                            else
                                            {
                                                <span>@data?.StatusMessage</span>
                                            }
                                        </td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div> *@

                <MudTable Items="@currentTaskModel" Dense="true" Striped="true" Breakpoint="Breakpoint.None">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="taskLogHeader">Task Logs</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Class="tableBodyStyling">Subtask Id</MudTh>
                        <MudTh Class="tableTaskColumnBodyStyling">User</MudTh>
                        <MudTh Class="tableTaskColumnBodyStyling">Template</MudTh>
                        <MudTh Class="tableTaskColumnBodyStyling">Created On</MudTh>
                        <MudTh Class="tableTaskColumnBodyStyling">Completed On</MudTh>
                        <MudTh Class="tableTaskColumnBodyStyling">Status</MudTh>
                        <MudTh Class="tableTaskColumnBodyStyling">Remarks</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd Class="tableTaskColumnBodyStyling"> @context.SubtaskId</MudTd>
                        <MudTd Class="tableBodyStyling">@context.UserID</MudTd>
                        <MudTd Class="tableBodyStyling">@context.TemplateName</MudTd>
                        <MudTd Class="tableBodyStyling">@context.CreatedOn</MudTd>
                        <MudTd Class="tableBodyStyling">@context.CompletedOn</MudTd>
                        <MudTd Class="tableBodyStyling">@context.StatusID</MudTd>

                        <MudTd>
                            @if (context?.StatusMessage == "In Process")
                            {
                                <span class="text-primary-emphasis bg-dark ms-5">@context.StatusMessage</span>
                                <MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Small" />
                            }
                            else if (context?.StatusMessage == "Completed")
                            {
                                <span style="color:limegreen;">@context?.StatusMessage</span>
                            }
                            else if (context?.StatusMessage == "Failed")
                            {
                                <span style="color:red;">@context.StatusMessage</span>
                            }
                            else if (context?.StatusMessage == "Queued")
                            {
                                <span style="color:orange;">@context?.StatusMessage</span>
                            }
                            else
                            {
                                <span>@context?.StatusMessage</span>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }

        </MudExpansionPanel>
    </MudExpansionPanels>

    <br />

    <hr />
}



@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

@code {

    string breakdownErrorMessage = "";
    string pagesErrorMessage = "";

    bool isDataLoaded = false;
    bool isContentLoaded = false;

    public string? project = "";
    public string? finalPPTOption = "MR-Rx Naming";

    ProcessState currentState = ProcessState.Idle;
    public bool hasProcessStarted = false;

    string message = "";

    private Color buttonColor;

    private List<Guid> taskIdList = new List<Guid>();

    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }

    public string SourceText { get; set; } = "Excel Charts";

    public string DSITextValue { get; set; } = "1062_HC_MR";

    public string HistoricalMeanTextValue { get; set; } = "";

    public string HistoricalMeanDescriptionTextValue { get; set; } = "";

    public double associationsValue { get; set; } = 1.0;

    public string AttributeTextValue { get; set; } = "";

    public string FitToConceptTextValue { get; set; } = "";

    public string? LogoFolderTextValue { get; set; }

    public string SpecificHistMean = "";

    public bool Size_CheckBox1 = false;

    public bool Size_CheckBox2 = true;

    public bool Size_CheckBox3 = true;

    public bool Label_CheckBox2 { get; set; } = true;

    private readonly string[] _states =
       {
         "MR-Rx Naming"
    };

    public class CheckboxItem
    {
        public int Id { get; set; }
        public string? Label { get; set; }
        public bool IsChecked { get; set; }
    }

    public class clschartPageGroup
    {
        public string strPageGroup { get; set; }
        public string strPageGroupType { get; set; }
        public bool isChecked { get; set; } = true;
    }

    public class clschartBreakdownGroup
    {
        public int intBreakdownIndex { get; set; }
        public int intBreakdownID { get; set; }
        public string? strBreakdownName { get; set; }
        public bool isChecked { get; set; } = false;
    }

    public class clschartTestnameGroup
    {
        public string? testNames { get; set; }
        public bool isChecked { get; set; } = true;
    }


    public class selectedPagesListClass
    {
        public string intPageID { get; set; }
        public string intSurveyID { get; set; }
        public string strPageName { get; set; }
        public string strPageType { get; set; }
        public string intPageIndex { get; set; }
        public bool isReportSelectedByUser { get; set; } = false;
        public bool isChecked { get; set; } = true;
    }


    private List<ReportStatus> reportStatuses = new();

    private List<string> selectedItems = new();

    List<string> testNamesList = new List<string>();
    List<FitToConceptModel> fitToConceptData = new List<FitToConceptModel>();

    List<clschartBreakdownGroup> lstBreakdown = new List<clschartBreakdownGroup>();

    List<clschartTestnameGroup> lstTestnames = new List<clschartTestnameGroup>();

    List<selectedPagesListClass> chartPageList = new List<selectedPagesListClass>();

    APIWrapper api = new APIWrapper();

    bool isMainContentLoaded = false;

    string user = "";

    Guid currentTaskId { get; set; }

    List<IndividualReportModel> currentTaskModel = new List<IndividualReportModel>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            // var userRes = authState.User;

            // user = userRes.Identity.Name.Replace("BI\\", "");

            WindowsIdentity windowsIdentity = WindowsIdentity.GetCurrent();
            user = windowsIdentity.Name.Replace("BI\\", "").ToString();

            var apiCall = await api.CallAPI("RACKEM", "Fit to Concept", "Fit to Concept", "OVERALL", "", "");

            chartPageList = getProjectChartDisplayNames("RACKEM");

            Console.Write(apiCall);

            XDocument xDoc = XDocument.Parse(apiCall);
            var data = xDoc?.Root?.Value;

            fitToConceptData = JsonConvert.DeserializeObject<List<FitToConceptModel>>(data!)!;

            project = fitToConceptData.First().ProjectName;

            LogoFolderTextValue = $"{project}_MR";

            foreach (var testname in fitToConceptData!)
            {
                lstTestnames.Add(new clschartTestnameGroup
                    {
                        testNames = testname.TestName!,
                        isChecked = true
                    });
            }

            // lstPg = await getProjectPagegroupNames(project!);

            lstBreakdown = await getProjectBreakdowngroupNames(project!);

            isDataLoaded = true;
            isContentLoaded = true;
            isMainContentLoaded = true;

            ReportService.OnChange += StateHasChanged;
            StartHotReload();
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }

    }

    public void Dispose()
    {
        ReportService.OnChange -= StateHasChanged;
    }

    private void ToggleBreakdownList(List<clschartBreakdownGroup> lstBreakdown)
    {
        foreach (var el in lstBreakdown)
        {
            el.isChecked = !el.isChecked;
        }
    }


    private void TogglePagesList(List<selectedPagesListClass> lstPg)
    {
        foreach (var el in lstPg)
        {
            el.isChecked = !el.isChecked;
        }
    }

    private void ToggleTestnames(List<clschartTestnameGroup> testnames)
    {
        foreach (var el in testnames)
        {
            el.isChecked = !el.isChecked;
        }
    }

    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Success" => "text-info bg-dark",
            "Processing" => "text-warning bg-dark",
            "Fail" => "text-danger bg-dark",
            "In Progress" => "text-primary-emphasis bg-dark",
            "Completed" => "text-info-emphasis",
            _ => "text-info-emphasis bg-dark"
        };
    }


    private async Task<List<clschartPageGroup>> getProjectPagegroupNames(string projectName)
    {
        try
        {
            System.Data.DataTable dt = clsData.MRData.getDataTable("[xlv1].[getPageGroupsForProject]  " + "'" + projectName + "'");


            List<clschartPageGroup> lstPg = dt.AsEnumerable().Select(row => new clschartPageGroup
                {
                    strPageGroup = row.Field<string>("strPageGroup")!,
                    strPageGroupType = row.Field<string>("strPageGroupType")!
                }).ToList();


            return lstPg;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private List<selectedPagesListClass> getProjectChartDisplayNames(string projectName)
    {
        string realchartName = "";

        System.Data.DataTable dt = clsData.MRData.getDataTable("[dbo].[ExcelChartsPrc_getPages]  " + 1 + ",'" + projectName + "'");

        List<selectedPagesListClass> lstPg
                                    = dt.AsEnumerable().Select(row => new selectedPagesListClass
                                        {
                                            strPageName = row.Field<string>("strPageName"),
                                            strPageType = row.Field<string>("strPageType"),
                                            intPageID = row.Field<Int32>("intPageID").ToString(),
                                            intPageIndex = row.Field<Int32>("intPageIndex").ToString(),
                                            intSurveyID = row.Field<Int32>("intSurveyID").ToString(),

                                        }).ToList();

        return lstPg;
    }

    private async Task<List<clschartBreakdownGroup>> getProjectBreakdowngroupNames(string projectName)
    {
        try
        {
            System.Data.DataTable dt = clsData.MRData.getDataTable("[xlv1].[getBreakDownForProject]  " + "'" + projectName + "'");


            List<clschartBreakdownGroup> lstPg = dt.AsEnumerable().Select(row => new clschartBreakdownGroup
                {
                    intBreakdownID = row.Field<int>("intBreakdownID")!,
                    intBreakdownIndex = row.Field<int>("intBreakdownIndex")!,
                    strBreakdownName = row.Field<string>("strBreakdownName")!,
                }).ToList();


            return lstPg;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnChartPageListChanged(List<selectedPagesListClass> updatedList)
    {
        chartPageList = updatedList;
    }

    private void OnBreakdownPageListChanged(List<clschartBreakdownGroup> updatedList)
    {
        lstBreakdown = updatedList;
    }

    private void OnTestnamePageListChanged(List<clschartTestnameGroup> testnamesList)
    {
        lstTestnames = testnamesList;
    }

    private void StartHotReload()
    {
        var timer = new System.Threading.Timer((_) =>
       {
           InvokeAsync(async () =>
           {
               await LoadIndividualLogs();
               StateHasChanged();
           });
       }, null, 0, 5000);
        StateHasChanged();
    }

    public async Task LoadIndividualLogs()
    {
        currentTaskModel = _taskLog.GetIndividualUserReport(currentTaskId);
        StateHasChanged();
    }

    private async Task ProcessDLL()
    {
        try
        {
            currentTaskId = new Guid();

            ReportService.Reset();

            var selectedPages = chartPageList.Where(x => x.isChecked).Select(x => x.strPageName).ToList();

            selectedPages.Remove("Linguistics");

            if (selectedPages.Count == 0)
            {
                pagesErrorMessage = "Select a page";
                return;
            }

            if (selectedPages.Count > 0)
            {
                pagesErrorMessage = "";
            }

            var selectedBreakdown = lstBreakdown.Where(x => x.isChecked).Select(x => x.strBreakdownName).ToList();

            if (selectedBreakdown.Count == 0)
            {
                breakdownErrorMessage = "Select a breakdown";
                return;
            }

            if (selectedBreakdown.Count > 0)
            {
                breakdownErrorMessage = "";
            }

            var selectedTestnames = lstTestnames.Where(x => x.isChecked).Select(x => x.testNames).ToList();

            hasProcessStarted = true;
            currentState = ProcessState.Generating;

            ReportService.StartProcessing();

            StartTime = DateTime.UtcNow;

            taskIdList = new List<Guid>();

            var res = new ReportGenerationRequestDLL
                {
                    project = project!,
                    templates = selectedPages,
                    breakdowns = selectedBreakdown!,
                    HistoricalMeanType = "",
                    HistoricalMeanDescription = "",
                    TaskId = Guid.NewGuid()
                };

            currentTaskId = _taskLog.InsertFinalReport(res.project, user, "Queued");


            await fitToConceptService.GenerateReportUsingDLLAsync(res, finalPPTOption!);

            var result = await fitToConceptService.SendDLLMergeRequestWithPanel(res, finalPPTOption!);

            Console.WriteLine(123);

            await Task.Delay(40000);

            if (result == "Successful")
            {
                buttonColor = Color.Tertiary;
                message = "Merge Successful";
                _taskLog.UpdateFinalReport("Success", res.project, user);
            }
            if (result == "Bad Request")
            {
                buttonColor = Color.Warning;
                message = "Something went wrong";
                _taskLog.UpdateFinalReport("Bad Request", res.project, user);
            }
            if (result == "Fail")
            {
                buttonColor = Color.Error;
                message = "Merge Insuccessful";
                _taskLog.UpdateFinalReport("Fail", res.project, user);
            }


            StateHasChanged();
            Console.WriteLine(result);

            hasProcessStarted = false;
            currentState = ProcessState.Done;

            ReportService.CompleteProcessing("Merge Successful");

            EndTime = DateTime.UtcNow;


        }
        catch (Exception)
        {
            _taskLog.UpdateFinalReport("Fail", this.project!, user);
            throw;
        }

        try
        {
            // foreach (var projectEl in projectWrapperAPIList)
            // {
            //     var request = new ReportGenerationRequestDLL
            //         {
            //             project = projectEl.project,
            //             templates = string.IsNullOrWhiteSpace(projectEl.template) ? new List<string>() : new List<string> { projectEl.template },
            //             breakdowns = string.IsNullOrWhiteSpace(projectEl.breakdown) ? new List<string>() : new List<string> { projectEl.breakdown },
            //             HistoricalMeanType = projectEl.HistoricalMeanType,
            //             HistoricalMeanDescription = projectEl.HistoricalMeanDescription,
            //             TaskId = Guid.NewGuid()
            //         };

            //     taskIdList.Add(request.TaskId);


            //     var taskId = await fitToConceptService.GenerateReportUsingDLLAsync(request);

            //      _ = PollStatusAsync(taskId);
            //     StateHasChanged();
            // }

            // var result = await fitToConceptService.SendDLLMergeRequest(projectWrapperAPIList);

            // if (result == "Successful")
            // {
            //     buttonColor = Color.Tertiary;
            //     message = "Merge Successful";
            // }
            // if (result == "Bad Request")
            // {
            //     buttonColor = Color.Warning;
            //     message = "Something went wrong";
            // }
            // if (result == "Fail")
            // {
            //     buttonColor = Color.Error;
            //     message = "Merge Insuccessful";
            // }

            // StateHasChanged();
            // Console.WriteLine(result);

            // hasProcessStarted = false;
            // currentState = ProcessState.Done;
            // EndTime = DateTime.UtcNow;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }


    private async Task PollStatusAsync(Guid taskId)
    {
        while (true)
        {
            //var response = await http.GetFromJsonAsync<ReportStatus>($"api/report/status/{taskId}");
            var status = await fitToConceptService.GetReportStatusAsync(taskId);

            var task = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
            if (task != null) task.Status = status;

            if (status == "Done" || status.StartsWith("Error")) break;
            StateHasChanged();
        }

        StateHasChanged();
    }


    private async Task WaitUntilAllTasksComplete(List<Guid> taskIds)
    {
        bool allDone = false;

        while (!allDone)
        {
            allDone = true;

            foreach (var taskId in taskIds)
            {
                var status = await fitToConceptService.GetReportStatusAsync(taskId);
                var existing = reportStatuses.FirstOrDefault(x => x.TaskId == taskId);
                if (existing != null) existing.Status = status;

                if (!(status == "Done" || status.StartsWith("Processing") || status == "Fail"))
                {
                    allDone = false;
                }
            }

            StateHasChanged(); // Refresh the UI table
            await Task.Delay(10); // Wait a bit before next check
        }
    }

}
